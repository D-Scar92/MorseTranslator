
Morse_Translator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032b8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800347c  0800347c  0001347c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800348c  0800348c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800348c  0800348c  0001348c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003494  08003494  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003494  08003494  00013494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003498  08003498  00013498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800349c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000014  080034b0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080034b0  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e72  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017e2  00000000  00000000  00029eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009d0  00000000  00000000  0002b698  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008f8  00000000  00000000  0002c068  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000217d3  00000000  00000000  0002c960  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008511  00000000  00000000  0004e133  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cccbc  00000000  00000000  00056644  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00123300  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027dc  00000000  00000000  0012337c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003464 	.word	0x08003464

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08003464 	.word	0x08003464

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	; 0x28
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	4b48      	ldr	r3, [pc, #288]	; (8000640 <MX_GPIO_Init+0x13c>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a47      	ldr	r2, [pc, #284]	; (8000640 <MX_GPIO_Init+0x13c>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b45      	ldr	r3, [pc, #276]	; (8000640 <MX_GPIO_Init+0x13c>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	4b41      	ldr	r3, [pc, #260]	; (8000640 <MX_GPIO_Init+0x13c>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a40      	ldr	r2, [pc, #256]	; (8000640 <MX_GPIO_Init+0x13c>)
 8000540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b3e      	ldr	r3, [pc, #248]	; (8000640 <MX_GPIO_Init+0x13c>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b3a      	ldr	r3, [pc, #232]	; (8000640 <MX_GPIO_Init+0x13c>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a39      	ldr	r2, [pc, #228]	; (8000640 <MX_GPIO_Init+0x13c>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b37      	ldr	r3, [pc, #220]	; (8000640 <MX_GPIO_Init+0x13c>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b33      	ldr	r3, [pc, #204]	; (8000640 <MX_GPIO_Init+0x13c>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a32      	ldr	r2, [pc, #200]	; (8000640 <MX_GPIO_Init+0x13c>)
 8000578:	f043 0302 	orr.w	r3, r3, #2
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b30      	ldr	r3, [pc, #192]	; (8000640 <MX_GPIO_Init+0x13c>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|ERROR_LED_Pin|B_SEG_Pin|C_SEG_Pin 
 800058a:	2200      	movs	r2, #0
 800058c:	f240 31e9 	movw	r1, #1001	; 0x3e9
 8000590:	482c      	ldr	r0, [pc, #176]	; (8000644 <MX_GPIO_Init+0x140>)
 8000592:	f001 ff67 	bl	8002464 <HAL_GPIO_WritePin>
                          |D_SEG_Pin|ANODE_1_Pin|G_SEG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ERROR_Pin|ANODE_2_Pin|ANODE_3_Pin|ANODE_4_Pin 
 8000596:	2200      	movs	r2, #0
 8000598:	f240 6171 	movw	r1, #1649	; 0x671
 800059c:	482a      	ldr	r0, [pc, #168]	; (8000648 <MX_GPIO_Init+0x144>)
 800059e:	f001 ff61 	bl	8002464 <HAL_GPIO_WritePin>
                          |E_SEG_Pin|A_SEG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2180      	movs	r1, #128	; 0x80
 80005a6:	4829      	ldr	r0, [pc, #164]	; (800064c <MX_GPIO_Init+0x148>)
 80005a8:	f001 ff5c 	bl	8002464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005b2:	4b27      	ldr	r3, [pc, #156]	; (8000650 <MX_GPIO_Init+0x14c>)
 80005b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4619      	mov	r1, r3
 80005c0:	4822      	ldr	r0, [pc, #136]	; (800064c <MX_GPIO_Init+0x148>)
 80005c2:	f001 fda5 	bl	8002110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|ERROR_LED_Pin|B_SEG_Pin|C_SEG_Pin 
 80005c6:	f240 33e9 	movw	r3, #1001	; 0x3e9
 80005ca:	617b      	str	r3, [r7, #20]
                          |D_SEG_Pin|ANODE_1_Pin|G_SEG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005cc:	2301      	movs	r3, #1
 80005ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	2300      	movs	r3, #0
 80005d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	4619      	mov	r1, r3
 80005de:	4819      	ldr	r0, [pc, #100]	; (8000644 <MX_GPIO_Init+0x140>)
 80005e0:	f001 fd96 	bl	8002110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_INPUT_Pin;
 80005e4:	2310      	movs	r3, #16
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_INPUT_GPIO_Port, &GPIO_InitStruct);
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	4619      	mov	r1, r3
 80005f6:	4813      	ldr	r0, [pc, #76]	; (8000644 <MX_GPIO_Init+0x140>)
 80005f8:	f001 fd8a 	bl	8002110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ERROR_Pin|ANODE_2_Pin|ANODE_3_Pin|ANODE_4_Pin 
 80005fc:	f240 6371 	movw	r3, #1649	; 0x671
 8000600:	617b      	str	r3, [r7, #20]
                          |E_SEG_Pin|A_SEG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	2301      	movs	r3, #1
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2300      	movs	r3, #0
 800060c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <MX_GPIO_Init+0x144>)
 8000616:	f001 fd7b 	bl	8002110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = F_SEG_Pin;
 800061a:	2380      	movs	r3, #128	; 0x80
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(F_SEG_GPIO_Port, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	4806      	ldr	r0, [pc, #24]	; (800064c <MX_GPIO_Init+0x148>)
 8000632:	f001 fd6d 	bl	8002110 <HAL_GPIO_Init>

}
 8000636:	bf00      	nop
 8000638:	3728      	adds	r7, #40	; 0x28
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40020000 	.word	0x40020000
 8000648:	40020400 	.word	0x40020400
 800064c:	40020800 	.word	0x40020800
 8000650:	10210000 	.word	0x10210000

08000654 <anode_handler>:
void input_handler();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void anode_handler(){
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	static uint8_t display_counter = 1;
	static uint8_t init_var = 1;
	if(init_var){
 8000658:	4b35      	ldr	r3, [pc, #212]	; (8000730 <anode_handler+0xdc>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d018      	beq.n	8000692 <anode_handler+0x3e>
		HAL_GPIO_WritePin(ANODE_1_GPIO_Port, ANODE_1_Pin, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000666:	4833      	ldr	r0, [pc, #204]	; (8000734 <anode_handler+0xe0>)
 8000668:	f001 fefc 	bl	8002464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ANODE_2_GPIO_Port, ANODE_2_Pin, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000672:	4831      	ldr	r0, [pc, #196]	; (8000738 <anode_handler+0xe4>)
 8000674:	f001 fef6 	bl	8002464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ANODE_3_GPIO_Port, ANODE_3_Pin, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2110      	movs	r1, #16
 800067c:	482e      	ldr	r0, [pc, #184]	; (8000738 <anode_handler+0xe4>)
 800067e:	f001 fef1 	bl	8002464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ANODE_4_GPIO_Port, ANODE_4_Pin, GPIO_PIN_SET);
 8000682:	2201      	movs	r2, #1
 8000684:	2120      	movs	r1, #32
 8000686:	482c      	ldr	r0, [pc, #176]	; (8000738 <anode_handler+0xe4>)
 8000688:	f001 feec 	bl	8002464 <HAL_GPIO_WritePin>
		init_var = 0;
 800068c:	4b28      	ldr	r3, [pc, #160]	; (8000730 <anode_handler+0xdc>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
	}
	if(display_counter == 1){
 8000692:	4b2a      	ldr	r3, [pc, #168]	; (800073c <anode_handler+0xe8>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d10a      	bne.n	80006b0 <anode_handler+0x5c>
		HAL_GPIO_WritePin(ANODE_1_GPIO_Port, ANODE_1_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a0:	4824      	ldr	r0, [pc, #144]	; (8000734 <anode_handler+0xe0>)
 80006a2:	f001 fedf 	bl	8002464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ANODE_4_GPIO_Port, ANODE_4_Pin, GPIO_PIN_SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2120      	movs	r1, #32
 80006aa:	4823      	ldr	r0, [pc, #140]	; (8000738 <anode_handler+0xe4>)
 80006ac:	f001 feda 	bl	8002464 <HAL_GPIO_WritePin>
	}
	if(display_counter == 2){
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <anode_handler+0xe8>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d10b      	bne.n	80006d0 <anode_handler+0x7c>
		HAL_GPIO_WritePin(ANODE_1_GPIO_Port, ANODE_1_Pin, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006be:	481d      	ldr	r0, [pc, #116]	; (8000734 <anode_handler+0xe0>)
 80006c0:	f001 fed0 	bl	8002464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ANODE_2_GPIO_Port, ANODE_2_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ca:	481b      	ldr	r0, [pc, #108]	; (8000738 <anode_handler+0xe4>)
 80006cc:	f001 feca 	bl	8002464 <HAL_GPIO_WritePin>
	}
	if(display_counter == 3){
 80006d0:	4b1a      	ldr	r3, [pc, #104]	; (800073c <anode_handler+0xe8>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	d10a      	bne.n	80006ee <anode_handler+0x9a>
		HAL_GPIO_WritePin(ANODE_2_GPIO_Port, ANODE_2_Pin, GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006de:	4816      	ldr	r0, [pc, #88]	; (8000738 <anode_handler+0xe4>)
 80006e0:	f001 fec0 	bl	8002464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ANODE_3_GPIO_Port, ANODE_3_Pin, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2110      	movs	r1, #16
 80006e8:	4813      	ldr	r0, [pc, #76]	; (8000738 <anode_handler+0xe4>)
 80006ea:	f001 febb 	bl	8002464 <HAL_GPIO_WritePin>
	}
	if(display_counter == 4){
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <anode_handler+0xe8>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b04      	cmp	r3, #4
 80006f4:	d109      	bne.n	800070a <anode_handler+0xb6>
		HAL_GPIO_WritePin(ANODE_3_GPIO_Port, ANODE_3_Pin, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	2110      	movs	r1, #16
 80006fa:	480f      	ldr	r0, [pc, #60]	; (8000738 <anode_handler+0xe4>)
 80006fc:	f001 feb2 	bl	8002464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ANODE_4_GPIO_Port, ANODE_4_Pin, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	2120      	movs	r1, #32
 8000704:	480c      	ldr	r0, [pc, #48]	; (8000738 <anode_handler+0xe4>)
 8000706:	f001 fead 	bl	8002464 <HAL_GPIO_WritePin>
	}
	display_counter++;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <anode_handler+0xe8>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	3301      	adds	r3, #1
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <anode_handler+0xe8>)
 8000714:	701a      	strb	r2, [r3, #0]
	if(display_counter > 4)
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <anode_handler+0xe8>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b04      	cmp	r3, #4
 800071c:	d902      	bls.n	8000724 <anode_handler+0xd0>
		display_counter = 1;
 800071e:	4b07      	ldr	r3, [pc, #28]	; (800073c <anode_handler+0xe8>)
 8000720:	2201      	movs	r2, #1
 8000722:	701a      	strb	r2, [r3, #0]
	display_flag = 0;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <anode_handler+0xec>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
	return;
 800072a:	bf00      	nop
}
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000005 	.word	0x20000005
 8000734:	40020000 	.word	0x40020000
 8000738:	40020400 	.word	0x40020400
 800073c:	20000006 	.word	0x20000006
 8000740:	20000032 	.word	0x20000032

08000744 <error_handler>:

void error_handler(){
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ERROR_GPIO_Port, ERROR_Pin, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2101      	movs	r1, #1
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <error_handler+0x40>)
 800074e:	f001 fe89 	bl	8002464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8000752:	2201      	movs	r2, #1
 8000754:	2101      	movs	r1, #1
 8000756:	480c      	ldr	r0, [pc, #48]	; (8000788 <error_handler+0x44>)
 8000758:	f001 fe84 	bl	8002464 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800075c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000760:	f001 fba2 	bl	8001ea8 <HAL_Delay>
	HAL_GPIO_WritePin(ERROR_GPIO_Port, ERROR_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2101      	movs	r1, #1
 8000768:	4806      	ldr	r0, [pc, #24]	; (8000784 <error_handler+0x40>)
 800076a:	f001 fe7b 	bl	8002464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2101      	movs	r1, #1
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <error_handler+0x44>)
 8000774:	f001 fe76 	bl	8002464 <HAL_GPIO_WritePin>
	error_flag = 0;
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <error_handler+0x48>)
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40020400 	.word	0x40020400
 8000788:	40020000 	.word	0x40020000
 800078c:	20000031 	.word	0x20000031

08000790 <input_handler>:

void input_handler(){
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6);
 8000796:	4821      	ldr	r0, [pc, #132]	; (800081c <input_handler+0x8c>)
 8000798:	f002 fbad 	bl	8002ef6 <HAL_TIM_Base_Stop_IT>
	uint32_t t1 = HAL_GetTick();
 800079c:	f001 fb78 	bl	8001e90 <HAL_GetTick>
 80007a0:	60f8      	str	r0, [r7, #12]
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	2101      	movs	r1, #1
 80007a6:	481e      	ldr	r0, [pc, #120]	; (8000820 <input_handler+0x90>)
 80007a8:	f001 fe5c 	bl	8002464 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(USER_INPUT_GPIO_Port, USER_INPUT_Pin)){
 80007ac:	e000      	b.n	80007b0 <input_handler+0x20>
		  continue;
 80007ae:	bf00      	nop
	while(HAL_GPIO_ReadPin(USER_INPUT_GPIO_Port, USER_INPUT_Pin)){
 80007b0:	2110      	movs	r1, #16
 80007b2:	481b      	ldr	r0, [pc, #108]	; (8000820 <input_handler+0x90>)
 80007b4:	f001 fe3e 	bl	8002434 <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d1f7      	bne.n	80007ae <input_handler+0x1e>
	}
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2101      	movs	r1, #1
 80007c2:	4817      	ldr	r0, [pc, #92]	; (8000820 <input_handler+0x90>)
 80007c4:	f001 fe4e 	bl	8002464 <HAL_GPIO_WritePin>
	uint32_t t2 = HAL_GetTick();
 80007c8:	f001 fb62 	bl	8001e90 <HAL_GetTick>
 80007cc:	60b8      	str	r0, [r7, #8]
	uint32_t dt = t2 - t1;
 80007ce:	68ba      	ldr	r2, [r7, #8]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	1ad3      	subs	r3, r2, r3
 80007d4:	607b      	str	r3, [r7, #4]
	if(dt > 300){
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80007dc:	d906      	bls.n	80007ec <input_handler+0x5c>
		  morse_word[signal_counter] = 1;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <input_handler+0x94>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <input_handler+0x98>)
 80007e6:	2101      	movs	r1, #1
 80007e8:	5499      	strb	r1, [r3, r2]
 80007ea:	e005      	b.n	80007f8 <input_handler+0x68>
	}
	else{
		  morse_word[signal_counter] = 0;
 80007ec:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <input_handler+0x94>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <input_handler+0x98>)
 80007f4:	2100      	movs	r1, #0
 80007f6:	5499      	strb	r1, [r3, r2]
	}
	signal_counter++;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <input_handler+0x94>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <input_handler+0x94>)
 8000802:	701a      	strb	r2, [r3, #0]
	 __HAL_TIM_SET_COUNTER(&htim6, 0);
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <input_handler+0x8c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2200      	movs	r2, #0
 800080a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim6);
 800080c:	4803      	ldr	r0, [pc, #12]	; (800081c <input_handler+0x8c>)
 800080e:	f002 fb4e 	bl	8002eae <HAL_TIM_Base_Start_IT>
}
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000034 	.word	0x20000034
 8000820:	40020000 	.word	0x40020000
 8000824:	20000030 	.word	0x20000030
 8000828:	20000000 	.word	0x20000000

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000830:	f001 fac8 	bl	8001dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000834:	f000 f826 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000838:	f7ff fe64 	bl	8000504 <MX_GPIO_Init>
  MX_TIM6_Init();
 800083c:	f001 fa3a 	bl	8001cb4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <main+0x48>)
 8000842:	f002 fb34 	bl	8002eae <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(error_flag){
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <main+0x4c>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <main+0x26>
		  error_handler();
 800084e:	f7ff ff79 	bl	8000744 <error_handler>
	  }
	  if(HAL_GPIO_ReadPin(USER_INPUT_GPIO_Port, USER_INPUT_Pin)){
 8000852:	2110      	movs	r1, #16
 8000854:	4809      	ldr	r0, [pc, #36]	; (800087c <main+0x50>)
 8000856:	f001 fded 	bl	8002434 <HAL_GPIO_ReadPin>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <main+0x38>
		  input_handler();
 8000860:	f7ff ff96 	bl	8000790 <input_handler>
	  }
	  if(display_flag){
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <main+0x54>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d0ec      	beq.n	8000846 <main+0x1a>
		  anode_handler();
 800086c:	f7ff fef2 	bl	8000654 <anode_handler>
	  if(error_flag){
 8000870:	e7e9      	b.n	8000846 <main+0x1a>
 8000872:	bf00      	nop
 8000874:	20000034 	.word	0x20000034
 8000878:	20000031 	.word	0x20000031
 800087c:	40020000 	.word	0x40020000
 8000880:	20000032 	.word	0x20000032

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b094      	sub	sp, #80	; 0x50
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	2234      	movs	r2, #52	; 0x34
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f002 fdde 	bl	8003454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	f107 0308 	add.w	r3, r7, #8
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	4b2a      	ldr	r3, [pc, #168]	; (8000958 <SystemClock_Config+0xd4>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	4a29      	ldr	r2, [pc, #164]	; (8000958 <SystemClock_Config+0xd4>)
 80008b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b6:	6413      	str	r3, [r2, #64]	; 0x40
 80008b8:	4b27      	ldr	r3, [pc, #156]	; (8000958 <SystemClock_Config+0xd4>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008c4:	2300      	movs	r3, #0
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	4b24      	ldr	r3, [pc, #144]	; (800095c <SystemClock_Config+0xd8>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008d0:	4a22      	ldr	r2, [pc, #136]	; (800095c <SystemClock_Config+0xd8>)
 80008d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d6:	6013      	str	r3, [r2, #0]
 80008d8:	4b20      	ldr	r3, [pc, #128]	; (800095c <SystemClock_Config+0xd8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e4:	2302      	movs	r3, #2
 80008e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e8:	2301      	movs	r3, #1
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ec:	2310      	movs	r3, #16
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f0:	2302      	movs	r3, #2
 80008f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f4:	2300      	movs	r3, #0
 80008f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008f8:	2310      	movs	r3, #16
 80008fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000900:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000902:	2304      	movs	r3, #4
 8000904:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000906:	2302      	movs	r3, #2
 8000908:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800090a:	2302      	movs	r3, #2
 800090c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4618      	mov	r0, r3
 8000914:	f002 f846 	bl	80029a4 <HAL_RCC_OscConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800091e:	f000 f81f 	bl	8000960 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000922:	230f      	movs	r3, #15
 8000924:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000926:	2302      	movs	r3, #2
 8000928:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800092e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000932:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000938:	f107 0308 	add.w	r3, r7, #8
 800093c:	2102      	movs	r1, #2
 800093e:	4618      	mov	r0, r3
 8000940:	f001 fdaa 	bl	8002498 <HAL_RCC_ClockConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800094a:	f000 f809 	bl	8000960 <Error_Handler>
  }
}
 800094e:	bf00      	nop
 8000950:	3750      	adds	r7, #80	; 0x50
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800
 800095c:	40007000 	.word	0x40007000

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
	...

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	4a0f      	ldr	r2, [pc, #60]	; (80009bc <HAL_MspInit+0x4c>)
 8000980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000984:	6453      	str	r3, [r2, #68]	; 0x44
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <HAL_MspInit+0x4c>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <HAL_MspInit+0x4c>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a0:	6413      	str	r3, [r2, #64]	; 0x40
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_MspInit+0x4c>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ae:	2007      	movs	r0, #7
 80009b0:	f001 fb6c 	bl	800208c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40023800 	.word	0x40023800

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <HardFault_Handler+0x4>

080009d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <MemManage_Handler+0x4>

080009da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a14:	f001 fa28 	bl	8001e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a20:	4802      	ldr	r0, [pc, #8]	; (8000a2c <TIM6_DAC_IRQHandler+0x10>)
 8000a22:	f002 fa93 	bl	8002f4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000034 	.word	0x20000034

08000a30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
/* Need to check which timer generated the interrupt! */
	if(htim->Instance == TIM6){
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a9c      	ldr	r2, [pc, #624]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	f041 8110 	bne.w	8001c64 <HAL_TIM_PeriodElapsedCallback+0x1234>
		if(morse_word[0] == 0 && morse_word[1] == 1 && morse_word[2] == 99 && morse_word[3] == 99 && morse_word[4] == 99){		//A
 8000a44:	4b9b      	ldr	r3, [pc, #620]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d139      	bne.n	8000ac0 <HAL_TIM_PeriodElapsedCallback+0x90>
 8000a4c:	4b99      	ldr	r3, [pc, #612]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000a4e:	785b      	ldrb	r3, [r3, #1]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d135      	bne.n	8000ac0 <HAL_TIM_PeriodElapsedCallback+0x90>
 8000a54:	4b97      	ldr	r3, [pc, #604]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000a56:	789b      	ldrb	r3, [r3, #2]
 8000a58:	2b63      	cmp	r3, #99	; 0x63
 8000a5a:	d131      	bne.n	8000ac0 <HAL_TIM_PeriodElapsedCallback+0x90>
 8000a5c:	4b95      	ldr	r3, [pc, #596]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000a5e:	78db      	ldrb	r3, [r3, #3]
 8000a60:	2b63      	cmp	r3, #99	; 0x63
 8000a62:	d12d      	bne.n	8000ac0 <HAL_TIM_PeriodElapsedCallback+0x90>
 8000a64:	4b93      	ldr	r3, [pc, #588]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000a66:	791b      	ldrb	r3, [r3, #4]
 8000a68:	2b63      	cmp	r3, #99	; 0x63
 8000a6a:	d129      	bne.n	8000ac0 <HAL_TIM_PeriodElapsedCallback+0x90>
			display_flag = 1;
 8000a6c:	4b92      	ldr	r3, [pc, #584]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a78:	4890      	ldr	r0, [pc, #576]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000a7a:	f001 fcf3 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2120      	movs	r1, #32
 8000a82:	488f      	ldr	r0, [pc, #572]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000a84:	f001 fcee 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2140      	movs	r1, #64	; 0x40
 8000a8c:	488c      	ldr	r0, [pc, #560]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000a8e:	f001 fce9 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2180      	movs	r1, #128	; 0x80
 8000a96:	488a      	ldr	r0, [pc, #552]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000a98:	f001 fce4 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2140      	movs	r1, #64	; 0x40
 8000aa0:	4886      	ldr	r0, [pc, #536]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000aa2:	f001 fcdf 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2180      	movs	r1, #128	; 0x80
 8000aaa:	4886      	ldr	r0, [pc, #536]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000aac:	f001 fcda 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab6:	4882      	ldr	r0, [pc, #520]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000ab8:	f001 fcd4 	bl	8002464 <HAL_GPIO_WritePin>
 8000abc:	f001 b8c0 	b.w	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 1 && morse_word[1] == 0 && morse_word[2] == 0 && morse_word[3] == 0 && morse_word[4] == 99){		//B
 8000ac0:	4b7c      	ldr	r3, [pc, #496]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d139      	bne.n	8000b3c <HAL_TIM_PeriodElapsedCallback+0x10c>
 8000ac8:	4b7a      	ldr	r3, [pc, #488]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000aca:	785b      	ldrb	r3, [r3, #1]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d135      	bne.n	8000b3c <HAL_TIM_PeriodElapsedCallback+0x10c>
 8000ad0:	4b78      	ldr	r3, [pc, #480]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000ad2:	789b      	ldrb	r3, [r3, #2]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d131      	bne.n	8000b3c <HAL_TIM_PeriodElapsedCallback+0x10c>
 8000ad8:	4b76      	ldr	r3, [pc, #472]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000ada:	78db      	ldrb	r3, [r3, #3]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d12d      	bne.n	8000b3c <HAL_TIM_PeriodElapsedCallback+0x10c>
 8000ae0:	4b74      	ldr	r3, [pc, #464]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000ae2:	791b      	ldrb	r3, [r3, #4]
 8000ae4:	2b63      	cmp	r3, #99	; 0x63
 8000ae6:	d129      	bne.n	8000b3c <HAL_TIM_PeriodElapsedCallback+0x10c>
			display_flag = 1;
 8000ae8:	4b73      	ldr	r3, [pc, #460]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000af4:	4871      	ldr	r0, [pc, #452]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000af6:	f001 fcb5 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_SET);
 8000afa:	2201      	movs	r2, #1
 8000afc:	2120      	movs	r1, #32
 8000afe:	4870      	ldr	r0, [pc, #448]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000b00:	f001 fcb0 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	2140      	movs	r1, #64	; 0x40
 8000b08:	486d      	ldr	r0, [pc, #436]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000b0a:	f001 fcab 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2180      	movs	r1, #128	; 0x80
 8000b12:	486b      	ldr	r0, [pc, #428]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000b14:	f001 fca6 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	2140      	movs	r1, #64	; 0x40
 8000b1c:	4867      	ldr	r0, [pc, #412]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000b1e:	f001 fca1 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 8000b22:	2201      	movs	r2, #1
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	4867      	ldr	r0, [pc, #412]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000b28:	f001 fc9c 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b32:	4863      	ldr	r0, [pc, #396]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000b34:	f001 fc96 	bl	8002464 <HAL_GPIO_WritePin>
 8000b38:	f001 b882 	b.w	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 1 && morse_word[1] == 0 && morse_word[2] == 1 && morse_word[3] == 0 && morse_word[4] == 99){		//C
 8000b3c:	4b5d      	ldr	r3, [pc, #372]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d139      	bne.n	8000bb8 <HAL_TIM_PeriodElapsedCallback+0x188>
 8000b44:	4b5b      	ldr	r3, [pc, #364]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000b46:	785b      	ldrb	r3, [r3, #1]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d135      	bne.n	8000bb8 <HAL_TIM_PeriodElapsedCallback+0x188>
 8000b4c:	4b59      	ldr	r3, [pc, #356]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000b4e:	789b      	ldrb	r3, [r3, #2]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d131      	bne.n	8000bb8 <HAL_TIM_PeriodElapsedCallback+0x188>
 8000b54:	4b57      	ldr	r3, [pc, #348]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000b56:	78db      	ldrb	r3, [r3, #3]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d12d      	bne.n	8000bb8 <HAL_TIM_PeriodElapsedCallback+0x188>
 8000b5c:	4b55      	ldr	r3, [pc, #340]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000b5e:	791b      	ldrb	r3, [r3, #4]
 8000b60:	2b63      	cmp	r3, #99	; 0x63
 8000b62:	d129      	bne.n	8000bb8 <HAL_TIM_PeriodElapsedCallback+0x188>
			display_flag = 1;
 8000b64:	4b54      	ldr	r3, [pc, #336]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b70:	4852      	ldr	r0, [pc, #328]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000b72:	f001 fc77 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2120      	movs	r1, #32
 8000b7a:	4851      	ldr	r0, [pc, #324]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000b7c:	f001 fc72 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2140      	movs	r1, #64	; 0x40
 8000b84:	484e      	ldr	r0, [pc, #312]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000b86:	f001 fc6d 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	2180      	movs	r1, #128	; 0x80
 8000b8e:	484c      	ldr	r0, [pc, #304]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000b90:	f001 fc68 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8000b94:	2201      	movs	r2, #1
 8000b96:	2140      	movs	r1, #64	; 0x40
 8000b98:	4848      	ldr	r0, [pc, #288]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000b9a:	f001 fc63 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2180      	movs	r1, #128	; 0x80
 8000ba2:	4848      	ldr	r0, [pc, #288]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000ba4:	f001 fc5e 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bae:	4844      	ldr	r0, [pc, #272]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000bb0:	f001 fc58 	bl	8002464 <HAL_GPIO_WritePin>
 8000bb4:	f001 b844 	b.w	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 1 && morse_word[1] == 0 && morse_word[2] == 0 && morse_word[3] == 99 && morse_word[4] == 99){		//D
 8000bb8:	4b3e      	ldr	r3, [pc, #248]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d139      	bne.n	8000c34 <HAL_TIM_PeriodElapsedCallback+0x204>
 8000bc0:	4b3c      	ldr	r3, [pc, #240]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000bc2:	785b      	ldrb	r3, [r3, #1]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d135      	bne.n	8000c34 <HAL_TIM_PeriodElapsedCallback+0x204>
 8000bc8:	4b3a      	ldr	r3, [pc, #232]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000bca:	789b      	ldrb	r3, [r3, #2]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d131      	bne.n	8000c34 <HAL_TIM_PeriodElapsedCallback+0x204>
 8000bd0:	4b38      	ldr	r3, [pc, #224]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000bd2:	78db      	ldrb	r3, [r3, #3]
 8000bd4:	2b63      	cmp	r3, #99	; 0x63
 8000bd6:	d12d      	bne.n	8000c34 <HAL_TIM_PeriodElapsedCallback+0x204>
 8000bd8:	4b36      	ldr	r3, [pc, #216]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000bda:	791b      	ldrb	r3, [r3, #4]
 8000bdc:	2b63      	cmp	r3, #99	; 0x63
 8000bde:	d129      	bne.n	8000c34 <HAL_TIM_PeriodElapsedCallback+0x204>
			display_flag = 1;
 8000be0:	4b35      	ldr	r3, [pc, #212]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bec:	4833      	ldr	r0, [pc, #204]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000bee:	f001 fc39 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_SET);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2120      	movs	r1, #32
 8000bf6:	4832      	ldr	r0, [pc, #200]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000bf8:	f001 fc34 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2140      	movs	r1, #64	; 0x40
 8000c00:	482f      	ldr	r0, [pc, #188]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000c02:	f001 fc2f 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 8000c06:	2201      	movs	r2, #1
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	482d      	ldr	r0, [pc, #180]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000c0c:	f001 fc2a 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2140      	movs	r1, #64	; 0x40
 8000c14:	4829      	ldr	r0, [pc, #164]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000c16:	f001 fc25 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2180      	movs	r1, #128	; 0x80
 8000c1e:	4829      	ldr	r0, [pc, #164]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000c20:	f001 fc20 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c2a:	4825      	ldr	r0, [pc, #148]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000c2c:	f001 fc1a 	bl	8002464 <HAL_GPIO_WritePin>
 8000c30:	f001 b806 	b.w	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 0 && morse_word[1] == 99 && morse_word[2] == 99 && morse_word[3] == 99 && morse_word[4] == 99){		//E
 8000c34:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d145      	bne.n	8000cc8 <HAL_TIM_PeriodElapsedCallback+0x298>
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000c3e:	785b      	ldrb	r3, [r3, #1]
 8000c40:	2b63      	cmp	r3, #99	; 0x63
 8000c42:	d141      	bne.n	8000cc8 <HAL_TIM_PeriodElapsedCallback+0x298>
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000c46:	789b      	ldrb	r3, [r3, #2]
 8000c48:	2b63      	cmp	r3, #99	; 0x63
 8000c4a:	d13d      	bne.n	8000cc8 <HAL_TIM_PeriodElapsedCallback+0x298>
 8000c4c:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000c4e:	78db      	ldrb	r3, [r3, #3]
 8000c50:	2b63      	cmp	r3, #99	; 0x63
 8000c52:	d139      	bne.n	8000cc8 <HAL_TIM_PeriodElapsedCallback+0x298>
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000c56:	791b      	ldrb	r3, [r3, #4]
 8000c58:	2b63      	cmp	r3, #99	; 0x63
 8000c5a:	d135      	bne.n	8000cc8 <HAL_TIM_PeriodElapsedCallback+0x298>
			display_flag = 1;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c68:	4814      	ldr	r0, [pc, #80]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000c6a:	f001 fbfb 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2120      	movs	r1, #32
 8000c72:	4813      	ldr	r0, [pc, #76]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000c74:	f001 fbf6 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2140      	movs	r1, #64	; 0x40
 8000c7c:	4810      	ldr	r0, [pc, #64]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000c7e:	f001 fbf1 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 8000c82:	2201      	movs	r2, #1
 8000c84:	2180      	movs	r1, #128	; 0x80
 8000c86:	480e      	ldr	r0, [pc, #56]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000c88:	f001 fbec 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2140      	movs	r1, #64	; 0x40
 8000c90:	480a      	ldr	r0, [pc, #40]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000c92:	f001 fbe7 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 8000c96:	2201      	movs	r2, #1
 8000c98:	2180      	movs	r1, #128	; 0x80
 8000c9a:	480a      	ldr	r0, [pc, #40]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000c9c:	f001 fbe2 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca6:	4806      	ldr	r0, [pc, #24]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000ca8:	f001 fbdc 	bl	8002464 <HAL_GPIO_WritePin>
 8000cac:	f000 bfc8 	b.w	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
 8000cb0:	40001000 	.word	0x40001000
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	20000032 	.word	0x20000032
 8000cbc:	40020400 	.word	0x40020400
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	40020800 	.word	0x40020800
		}
		else if(morse_word[0] == 0 && morse_word[1] == 0 && morse_word[2] == 1 && morse_word[3] == 0 && morse_word[4] == 99){		//F
 8000cc8:	4b9a      	ldr	r3, [pc, #616]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d139      	bne.n	8000d44 <HAL_TIM_PeriodElapsedCallback+0x314>
 8000cd0:	4b98      	ldr	r3, [pc, #608]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000cd2:	785b      	ldrb	r3, [r3, #1]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d135      	bne.n	8000d44 <HAL_TIM_PeriodElapsedCallback+0x314>
 8000cd8:	4b96      	ldr	r3, [pc, #600]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000cda:	789b      	ldrb	r3, [r3, #2]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d131      	bne.n	8000d44 <HAL_TIM_PeriodElapsedCallback+0x314>
 8000ce0:	4b94      	ldr	r3, [pc, #592]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000ce2:	78db      	ldrb	r3, [r3, #3]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d12d      	bne.n	8000d44 <HAL_TIM_PeriodElapsedCallback+0x314>
 8000ce8:	4b92      	ldr	r3, [pc, #584]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000cea:	791b      	ldrb	r3, [r3, #4]
 8000cec:	2b63      	cmp	r3, #99	; 0x63
 8000cee:	d129      	bne.n	8000d44 <HAL_TIM_PeriodElapsedCallback+0x314>
			display_flag = 1;
 8000cf0:	4b91      	ldr	r3, [pc, #580]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cfc:	488f      	ldr	r0, [pc, #572]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8000cfe:	f001 fbb1 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2120      	movs	r1, #32
 8000d06:	488e      	ldr	r0, [pc, #568]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000d08:	f001 fbac 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2140      	movs	r1, #64	; 0x40
 8000d10:	488b      	ldr	r0, [pc, #556]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000d12:	f001 fba7 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2180      	movs	r1, #128	; 0x80
 8000d1a:	4889      	ldr	r0, [pc, #548]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000d1c:	f001 fba2 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	2140      	movs	r1, #64	; 0x40
 8000d24:	4885      	ldr	r0, [pc, #532]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8000d26:	f001 fb9d 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2180      	movs	r1, #128	; 0x80
 8000d2e:	4885      	ldr	r0, [pc, #532]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x514>)
 8000d30:	f001 fb98 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d3a:	4881      	ldr	r0, [pc, #516]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000d3c:	f001 fb92 	bl	8002464 <HAL_GPIO_WritePin>
 8000d40:	f000 bf7e 	b.w	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 1 && morse_word[1] == 1 && morse_word[2] == 0 && morse_word[3] == 99 && morse_word[4] == 99){		//G
 8000d44:	4b7b      	ldr	r3, [pc, #492]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d139      	bne.n	8000dc0 <HAL_TIM_PeriodElapsedCallback+0x390>
 8000d4c:	4b79      	ldr	r3, [pc, #484]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000d4e:	785b      	ldrb	r3, [r3, #1]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d135      	bne.n	8000dc0 <HAL_TIM_PeriodElapsedCallback+0x390>
 8000d54:	4b77      	ldr	r3, [pc, #476]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000d56:	789b      	ldrb	r3, [r3, #2]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d131      	bne.n	8000dc0 <HAL_TIM_PeriodElapsedCallback+0x390>
 8000d5c:	4b75      	ldr	r3, [pc, #468]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000d5e:	78db      	ldrb	r3, [r3, #3]
 8000d60:	2b63      	cmp	r3, #99	; 0x63
 8000d62:	d12d      	bne.n	8000dc0 <HAL_TIM_PeriodElapsedCallback+0x390>
 8000d64:	4b73      	ldr	r3, [pc, #460]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000d66:	791b      	ldrb	r3, [r3, #4]
 8000d68:	2b63      	cmp	r3, #99	; 0x63
 8000d6a:	d129      	bne.n	8000dc0 <HAL_TIM_PeriodElapsedCallback+0x390>
			display_flag = 1;
 8000d6c:	4b72      	ldr	r3, [pc, #456]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d78:	4870      	ldr	r0, [pc, #448]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8000d7a:	f001 fb73 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2120      	movs	r1, #32
 8000d82:	486f      	ldr	r0, [pc, #444]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000d84:	f001 fb6e 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2140      	movs	r1, #64	; 0x40
 8000d8c:	486c      	ldr	r0, [pc, #432]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000d8e:	f001 fb69 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	2180      	movs	r1, #128	; 0x80
 8000d96:	486a      	ldr	r0, [pc, #424]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000d98:	f001 fb64 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2140      	movs	r1, #64	; 0x40
 8000da0:	4866      	ldr	r0, [pc, #408]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8000da2:	f001 fb5f 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 8000da6:	2201      	movs	r2, #1
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	4866      	ldr	r0, [pc, #408]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x514>)
 8000dac:	f001 fb5a 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000db6:	4862      	ldr	r0, [pc, #392]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000db8:	f001 fb54 	bl	8002464 <HAL_GPIO_WritePin>
 8000dbc:	f000 bf40 	b.w	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 0 && morse_word[1] == 0 && morse_word[2] == 0 && morse_word[3] == 0 && morse_word[4] == 99){		//H
 8000dc0:	4b5c      	ldr	r3, [pc, #368]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d139      	bne.n	8000e3c <HAL_TIM_PeriodElapsedCallback+0x40c>
 8000dc8:	4b5a      	ldr	r3, [pc, #360]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000dca:	785b      	ldrb	r3, [r3, #1]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d135      	bne.n	8000e3c <HAL_TIM_PeriodElapsedCallback+0x40c>
 8000dd0:	4b58      	ldr	r3, [pc, #352]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000dd2:	789b      	ldrb	r3, [r3, #2]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d131      	bne.n	8000e3c <HAL_TIM_PeriodElapsedCallback+0x40c>
 8000dd8:	4b56      	ldr	r3, [pc, #344]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000dda:	78db      	ldrb	r3, [r3, #3]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d12d      	bne.n	8000e3c <HAL_TIM_PeriodElapsedCallback+0x40c>
 8000de0:	4b54      	ldr	r3, [pc, #336]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000de2:	791b      	ldrb	r3, [r3, #4]
 8000de4:	2b63      	cmp	r3, #99	; 0x63
 8000de6:	d129      	bne.n	8000e3c <HAL_TIM_PeriodElapsedCallback+0x40c>
			display_flag = 1;
 8000de8:	4b53      	ldr	r3, [pc, #332]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df4:	4851      	ldr	r0, [pc, #324]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8000df6:	f001 fb35 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_SET);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2120      	movs	r1, #32
 8000dfe:	4850      	ldr	r0, [pc, #320]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000e00:	f001 fb30 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	2140      	movs	r1, #64	; 0x40
 8000e08:	484d      	ldr	r0, [pc, #308]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000e0a:	f001 fb2b 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	484b      	ldr	r0, [pc, #300]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000e14:	f001 fb26 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2140      	movs	r1, #64	; 0x40
 8000e1c:	4847      	ldr	r0, [pc, #284]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8000e1e:	f001 fb21 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 8000e22:	2201      	movs	r2, #1
 8000e24:	2180      	movs	r1, #128	; 0x80
 8000e26:	4847      	ldr	r0, [pc, #284]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x514>)
 8000e28:	f001 fb1c 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e32:	4843      	ldr	r0, [pc, #268]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000e34:	f001 fb16 	bl	8002464 <HAL_GPIO_WritePin>
 8000e38:	f000 bf02 	b.w	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 0 && morse_word[1] == 0 && morse_word[2] == 99 && morse_word[3] == 99 && morse_word[4] == 99){		//I
 8000e3c:	4b3d      	ldr	r3, [pc, #244]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d139      	bne.n	8000eb8 <HAL_TIM_PeriodElapsedCallback+0x488>
 8000e44:	4b3b      	ldr	r3, [pc, #236]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000e46:	785b      	ldrb	r3, [r3, #1]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d135      	bne.n	8000eb8 <HAL_TIM_PeriodElapsedCallback+0x488>
 8000e4c:	4b39      	ldr	r3, [pc, #228]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000e4e:	789b      	ldrb	r3, [r3, #2]
 8000e50:	2b63      	cmp	r3, #99	; 0x63
 8000e52:	d131      	bne.n	8000eb8 <HAL_TIM_PeriodElapsedCallback+0x488>
 8000e54:	4b37      	ldr	r3, [pc, #220]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000e56:	78db      	ldrb	r3, [r3, #3]
 8000e58:	2b63      	cmp	r3, #99	; 0x63
 8000e5a:	d12d      	bne.n	8000eb8 <HAL_TIM_PeriodElapsedCallback+0x488>
 8000e5c:	4b35      	ldr	r3, [pc, #212]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000e5e:	791b      	ldrb	r3, [r3, #4]
 8000e60:	2b63      	cmp	r3, #99	; 0x63
 8000e62:	d129      	bne.n	8000eb8 <HAL_TIM_PeriodElapsedCallback+0x488>
			display_flag = 1;
 8000e64:	4b34      	ldr	r3, [pc, #208]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e70:	4832      	ldr	r0, [pc, #200]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8000e72:	f001 faf7 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	2120      	movs	r1, #32
 8000e7a:	4831      	ldr	r0, [pc, #196]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000e7c:	f001 faf2 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2140      	movs	r1, #64	; 0x40
 8000e84:	482e      	ldr	r0, [pc, #184]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000e86:	f001 faed 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2180      	movs	r1, #128	; 0x80
 8000e8e:	482c      	ldr	r0, [pc, #176]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000e90:	f001 fae8 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2140      	movs	r1, #64	; 0x40
 8000e98:	4828      	ldr	r0, [pc, #160]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8000e9a:	f001 fae3 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2180      	movs	r1, #128	; 0x80
 8000ea2:	4828      	ldr	r0, [pc, #160]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x514>)
 8000ea4:	f001 fade 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eae:	4824      	ldr	r0, [pc, #144]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000eb0:	f001 fad8 	bl	8002464 <HAL_GPIO_WritePin>
 8000eb4:	f000 bec4 	b.w	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 0 && morse_word[1] == 1 && morse_word[2] == 1 && morse_word[3] == 1 && morse_word[4] == 99){		//J
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d143      	bne.n	8000f48 <HAL_TIM_PeriodElapsedCallback+0x518>
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000ec2:	785b      	ldrb	r3, [r3, #1]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d13f      	bne.n	8000f48 <HAL_TIM_PeriodElapsedCallback+0x518>
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000eca:	789b      	ldrb	r3, [r3, #2]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d13b      	bne.n	8000f48 <HAL_TIM_PeriodElapsedCallback+0x518>
 8000ed0:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000ed2:	78db      	ldrb	r3, [r3, #3]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d137      	bne.n	8000f48 <HAL_TIM_PeriodElapsedCallback+0x518>
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000eda:	791b      	ldrb	r3, [r3, #4]
 8000edc:	2b63      	cmp	r3, #99	; 0x63
 8000ede:	d133      	bne.n	8000f48 <HAL_TIM_PeriodElapsedCallback+0x518>
			display_flag = 1;
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eec:	4813      	ldr	r0, [pc, #76]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8000eee:	f001 fab9 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2120      	movs	r1, #32
 8000ef6:	4812      	ldr	r0, [pc, #72]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000ef8:	f001 fab4 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2140      	movs	r1, #64	; 0x40
 8000f00:	480f      	ldr	r0, [pc, #60]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000f02:	f001 faaf 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	2180      	movs	r1, #128	; 0x80
 8000f0a:	480d      	ldr	r0, [pc, #52]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000f0c:	f001 faaa 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2140      	movs	r1, #64	; 0x40
 8000f14:	4809      	ldr	r0, [pc, #36]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8000f16:	f001 faa5 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2180      	movs	r1, #128	; 0x80
 8000f1e:	4809      	ldr	r0, [pc, #36]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x514>)
 8000f20:	f001 faa0 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000f2c:	f001 fa9a 	bl	8002464 <HAL_GPIO_WritePin>
 8000f30:	f000 be86 	b.w	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
 8000f34:	20000000 	.word	0x20000000
 8000f38:	20000032 	.word	0x20000032
 8000f3c:	40020400 	.word	0x40020400
 8000f40:	40020000 	.word	0x40020000
 8000f44:	40020800 	.word	0x40020800

		}
		else if(morse_word[0] == 1 && morse_word[1] == 0 && morse_word[2] == 1 && morse_word[3] == 99 && morse_word[4] == 99){		//K
 8000f48:	4b9a      	ldr	r3, [pc, #616]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d139      	bne.n	8000fc4 <HAL_TIM_PeriodElapsedCallback+0x594>
 8000f50:	4b98      	ldr	r3, [pc, #608]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 8000f52:	785b      	ldrb	r3, [r3, #1]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d135      	bne.n	8000fc4 <HAL_TIM_PeriodElapsedCallback+0x594>
 8000f58:	4b96      	ldr	r3, [pc, #600]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 8000f5a:	789b      	ldrb	r3, [r3, #2]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d131      	bne.n	8000fc4 <HAL_TIM_PeriodElapsedCallback+0x594>
 8000f60:	4b94      	ldr	r3, [pc, #592]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 8000f62:	78db      	ldrb	r3, [r3, #3]
 8000f64:	2b63      	cmp	r3, #99	; 0x63
 8000f66:	d12d      	bne.n	8000fc4 <HAL_TIM_PeriodElapsedCallback+0x594>
 8000f68:	4b92      	ldr	r3, [pc, #584]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 8000f6a:	791b      	ldrb	r3, [r3, #4]
 8000f6c:	2b63      	cmp	r3, #99	; 0x63
 8000f6e:	d129      	bne.n	8000fc4 <HAL_TIM_PeriodElapsedCallback+0x594>
			display_flag = 1;
 8000f70:	4b91      	ldr	r3, [pc, #580]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x788>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7c:	488f      	ldr	r0, [pc, #572]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8000f7e:	f001 fa71 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2120      	movs	r1, #32
 8000f86:	488e      	ldr	r0, [pc, #568]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x790>)
 8000f88:	f001 fa6c 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2140      	movs	r1, #64	; 0x40
 8000f90:	488b      	ldr	r0, [pc, #556]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x790>)
 8000f92:	f001 fa67 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2180      	movs	r1, #128	; 0x80
 8000f9a:	4889      	ldr	r0, [pc, #548]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x790>)
 8000f9c:	f001 fa62 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2140      	movs	r1, #64	; 0x40
 8000fa4:	4885      	ldr	r0, [pc, #532]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8000fa6:	f001 fa5d 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	4885      	ldr	r0, [pc, #532]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x794>)
 8000fb0:	f001 fa58 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fba:	4881      	ldr	r0, [pc, #516]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x790>)
 8000fbc:	f001 fa52 	bl	8002464 <HAL_GPIO_WritePin>
 8000fc0:	f000 be3e 	b.w	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 0 && morse_word[1] == 1 && morse_word[2] == 0 && morse_word[3] == 0 && morse_word[4] == 99){		//L
 8000fc4:	4b7b      	ldr	r3, [pc, #492]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d139      	bne.n	8001040 <HAL_TIM_PeriodElapsedCallback+0x610>
 8000fcc:	4b79      	ldr	r3, [pc, #484]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 8000fce:	785b      	ldrb	r3, [r3, #1]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d135      	bne.n	8001040 <HAL_TIM_PeriodElapsedCallback+0x610>
 8000fd4:	4b77      	ldr	r3, [pc, #476]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 8000fd6:	789b      	ldrb	r3, [r3, #2]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d131      	bne.n	8001040 <HAL_TIM_PeriodElapsedCallback+0x610>
 8000fdc:	4b75      	ldr	r3, [pc, #468]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 8000fde:	78db      	ldrb	r3, [r3, #3]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d12d      	bne.n	8001040 <HAL_TIM_PeriodElapsedCallback+0x610>
 8000fe4:	4b73      	ldr	r3, [pc, #460]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 8000fe6:	791b      	ldrb	r3, [r3, #4]
 8000fe8:	2b63      	cmp	r3, #99	; 0x63
 8000fea:	d129      	bne.n	8001040 <HAL_TIM_PeriodElapsedCallback+0x610>
			display_flag = 1;
 8000fec:	4b72      	ldr	r3, [pc, #456]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x788>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff8:	4870      	ldr	r0, [pc, #448]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8000ffa:	f001 fa33 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2120      	movs	r1, #32
 8001002:	486f      	ldr	r0, [pc, #444]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x790>)
 8001004:	f001 fa2e 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	2140      	movs	r1, #64	; 0x40
 800100c:	486c      	ldr	r0, [pc, #432]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x790>)
 800100e:	f001 fa29 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 8001012:	2201      	movs	r2, #1
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	486a      	ldr	r0, [pc, #424]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x790>)
 8001018:	f001 fa24 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	2140      	movs	r1, #64	; 0x40
 8001020:	4866      	ldr	r0, [pc, #408]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8001022:	f001 fa1f 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 8001026:	2201      	movs	r2, #1
 8001028:	2180      	movs	r1, #128	; 0x80
 800102a:	4866      	ldr	r0, [pc, #408]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x794>)
 800102c:	f001 fa1a 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001036:	4862      	ldr	r0, [pc, #392]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x790>)
 8001038:	f001 fa14 	bl	8002464 <HAL_GPIO_WritePin>
 800103c:	f000 be00 	b.w	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 1 && morse_word[1] == 1 && morse_word[2] == 99 && morse_word[3] == 99 && morse_word[4] == 99){		//M
 8001040:	4b5c      	ldr	r3, [pc, #368]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d139      	bne.n	80010bc <HAL_TIM_PeriodElapsedCallback+0x68c>
 8001048:	4b5a      	ldr	r3, [pc, #360]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 800104a:	785b      	ldrb	r3, [r3, #1]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d135      	bne.n	80010bc <HAL_TIM_PeriodElapsedCallback+0x68c>
 8001050:	4b58      	ldr	r3, [pc, #352]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 8001052:	789b      	ldrb	r3, [r3, #2]
 8001054:	2b63      	cmp	r3, #99	; 0x63
 8001056:	d131      	bne.n	80010bc <HAL_TIM_PeriodElapsedCallback+0x68c>
 8001058:	4b56      	ldr	r3, [pc, #344]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 800105a:	78db      	ldrb	r3, [r3, #3]
 800105c:	2b63      	cmp	r3, #99	; 0x63
 800105e:	d12d      	bne.n	80010bc <HAL_TIM_PeriodElapsedCallback+0x68c>
 8001060:	4b54      	ldr	r3, [pc, #336]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 8001062:	791b      	ldrb	r3, [r3, #4]
 8001064:	2b63      	cmp	r3, #99	; 0x63
 8001066:	d129      	bne.n	80010bc <HAL_TIM_PeriodElapsedCallback+0x68c>
			display_flag = 1;
 8001068:	4b53      	ldr	r3, [pc, #332]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x788>)
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 800106e:	2201      	movs	r2, #1
 8001070:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001074:	4851      	ldr	r0, [pc, #324]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8001076:	f001 f9f5 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	2120      	movs	r1, #32
 800107e:	4850      	ldr	r0, [pc, #320]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x790>)
 8001080:	f001 f9f0 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	2140      	movs	r1, #64	; 0x40
 8001088:	484d      	ldr	r0, [pc, #308]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x790>)
 800108a:	f001 f9eb 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	484b      	ldr	r0, [pc, #300]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x790>)
 8001094:	f001 f9e6 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	2140      	movs	r1, #64	; 0x40
 800109c:	4847      	ldr	r0, [pc, #284]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x78c>)
 800109e:	f001 f9e1 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2180      	movs	r1, #128	; 0x80
 80010a6:	4847      	ldr	r0, [pc, #284]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x794>)
 80010a8:	f001 f9dc 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b2:	4843      	ldr	r0, [pc, #268]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x790>)
 80010b4:	f001 f9d6 	bl	8002464 <HAL_GPIO_WritePin>
 80010b8:	f000 bdc2 	b.w	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 1 && morse_word[1] == 0 && morse_word[2] == 99 && morse_word[3] == 99 && morse_word[4] == 99){		//N
 80010bc:	4b3d      	ldr	r3, [pc, #244]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d139      	bne.n	8001138 <HAL_TIM_PeriodElapsedCallback+0x708>
 80010c4:	4b3b      	ldr	r3, [pc, #236]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 80010c6:	785b      	ldrb	r3, [r3, #1]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d135      	bne.n	8001138 <HAL_TIM_PeriodElapsedCallback+0x708>
 80010cc:	4b39      	ldr	r3, [pc, #228]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 80010ce:	789b      	ldrb	r3, [r3, #2]
 80010d0:	2b63      	cmp	r3, #99	; 0x63
 80010d2:	d131      	bne.n	8001138 <HAL_TIM_PeriodElapsedCallback+0x708>
 80010d4:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 80010d6:	78db      	ldrb	r3, [r3, #3]
 80010d8:	2b63      	cmp	r3, #99	; 0x63
 80010da:	d12d      	bne.n	8001138 <HAL_TIM_PeriodElapsedCallback+0x708>
 80010dc:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 80010de:	791b      	ldrb	r3, [r3, #4]
 80010e0:	2b63      	cmp	r3, #99	; 0x63
 80010e2:	d129      	bne.n	8001138 <HAL_TIM_PeriodElapsedCallback+0x708>
			display_flag = 1;
 80010e4:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x788>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f0:	4832      	ldr	r0, [pc, #200]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x78c>)
 80010f2:	f001 f9b7 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2120      	movs	r1, #32
 80010fa:	4831      	ldr	r0, [pc, #196]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x790>)
 80010fc:	f001 f9b2 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	2140      	movs	r1, #64	; 0x40
 8001104:	482e      	ldr	r0, [pc, #184]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x790>)
 8001106:	f001 f9ad 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	482c      	ldr	r0, [pc, #176]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x790>)
 8001110:	f001 f9a8 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8001114:	2201      	movs	r2, #1
 8001116:	2140      	movs	r1, #64	; 0x40
 8001118:	4828      	ldr	r0, [pc, #160]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x78c>)
 800111a:	f001 f9a3 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 800111e:	2201      	movs	r2, #1
 8001120:	2180      	movs	r1, #128	; 0x80
 8001122:	4828      	ldr	r0, [pc, #160]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x794>)
 8001124:	f001 f99e 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 8001128:	2201      	movs	r2, #1
 800112a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800112e:	4824      	ldr	r0, [pc, #144]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x790>)
 8001130:	f001 f998 	bl	8002464 <HAL_GPIO_WritePin>
 8001134:	f000 bd84 	b.w	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 1 && morse_word[1] == 1 && morse_word[2] == 1 && morse_word[3] == 99 && morse_word[4] == 99){		//O
 8001138:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d143      	bne.n	80011c8 <HAL_TIM_PeriodElapsedCallback+0x798>
 8001140:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 8001142:	785b      	ldrb	r3, [r3, #1]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d13f      	bne.n	80011c8 <HAL_TIM_PeriodElapsedCallback+0x798>
 8001148:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 800114a:	789b      	ldrb	r3, [r3, #2]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d13b      	bne.n	80011c8 <HAL_TIM_PeriodElapsedCallback+0x798>
 8001150:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 8001152:	78db      	ldrb	r3, [r3, #3]
 8001154:	2b63      	cmp	r3, #99	; 0x63
 8001156:	d137      	bne.n	80011c8 <HAL_TIM_PeriodElapsedCallback+0x798>
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 800115a:	791b      	ldrb	r3, [r3, #4]
 800115c:	2b63      	cmp	r3, #99	; 0x63
 800115e:	d133      	bne.n	80011c8 <HAL_TIM_PeriodElapsedCallback+0x798>
			display_flag = 1;
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x788>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 7100 	mov.w	r1, #512	; 0x200
 800116c:	4813      	ldr	r0, [pc, #76]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x78c>)
 800116e:	f001 f979 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_SET);
 8001172:	2201      	movs	r2, #1
 8001174:	2120      	movs	r1, #32
 8001176:	4812      	ldr	r0, [pc, #72]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x790>)
 8001178:	f001 f974 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_SET);
 800117c:	2201      	movs	r2, #1
 800117e:	2140      	movs	r1, #64	; 0x40
 8001180:	480f      	ldr	r0, [pc, #60]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x790>)
 8001182:	f001 f96f 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	2180      	movs	r1, #128	; 0x80
 800118a:	480d      	ldr	r0, [pc, #52]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x790>)
 800118c:	f001 f96a 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8001190:	2201      	movs	r2, #1
 8001192:	2140      	movs	r1, #64	; 0x40
 8001194:	4809      	ldr	r0, [pc, #36]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8001196:	f001 f965 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 800119a:	2201      	movs	r2, #1
 800119c:	2180      	movs	r1, #128	; 0x80
 800119e:	4809      	ldr	r0, [pc, #36]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x794>)
 80011a0:	f001 f960 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011aa:	4805      	ldr	r0, [pc, #20]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x790>)
 80011ac:	f001 f95a 	bl	8002464 <HAL_GPIO_WritePin>
 80011b0:	f000 bd46 	b.w	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
 80011b4:	20000000 	.word	0x20000000
 80011b8:	20000032 	.word	0x20000032
 80011bc:	40020400 	.word	0x40020400
 80011c0:	40020000 	.word	0x40020000
 80011c4:	40020800 	.word	0x40020800
		}
		else if(morse_word[0] == 0 && morse_word[1] == 1 && morse_word[2] == 1 && morse_word[3] == 0 && morse_word[4] == 99){		//P
 80011c8:	4b9a      	ldr	r3, [pc, #616]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d139      	bne.n	8001244 <HAL_TIM_PeriodElapsedCallback+0x814>
 80011d0:	4b98      	ldr	r3, [pc, #608]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 80011d2:	785b      	ldrb	r3, [r3, #1]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d135      	bne.n	8001244 <HAL_TIM_PeriodElapsedCallback+0x814>
 80011d8:	4b96      	ldr	r3, [pc, #600]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 80011da:	789b      	ldrb	r3, [r3, #2]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d131      	bne.n	8001244 <HAL_TIM_PeriodElapsedCallback+0x814>
 80011e0:	4b94      	ldr	r3, [pc, #592]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 80011e2:	78db      	ldrb	r3, [r3, #3]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d12d      	bne.n	8001244 <HAL_TIM_PeriodElapsedCallback+0x814>
 80011e8:	4b92      	ldr	r3, [pc, #584]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 80011ea:	791b      	ldrb	r3, [r3, #4]
 80011ec:	2b63      	cmp	r3, #99	; 0x63
 80011ee:	d129      	bne.n	8001244 <HAL_TIM_PeriodElapsedCallback+0x814>
			display_flag = 1;
 80011f0:	4b91      	ldr	r3, [pc, #580]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0xa08>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 80011f6:	2201      	movs	r2, #1
 80011f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011fc:	488f      	ldr	r0, [pc, #572]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 80011fe:	f001 f931 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2120      	movs	r1, #32
 8001206:	488e      	ldr	r0, [pc, #568]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 8001208:	f001 f92c 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	2140      	movs	r1, #64	; 0x40
 8001210:	488b      	ldr	r0, [pc, #556]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 8001212:	f001 f927 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 8001216:	2201      	movs	r2, #1
 8001218:	2180      	movs	r1, #128	; 0x80
 800121a:	4889      	ldr	r0, [pc, #548]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 800121c:	f001 f922 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8001220:	2201      	movs	r2, #1
 8001222:	2140      	movs	r1, #64	; 0x40
 8001224:	4885      	ldr	r0, [pc, #532]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 8001226:	f001 f91d 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 800122a:	2201      	movs	r2, #1
 800122c:	2180      	movs	r1, #128	; 0x80
 800122e:	4885      	ldr	r0, [pc, #532]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0xa14>)
 8001230:	f001 f918 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 7100 	mov.w	r1, #512	; 0x200
 800123a:	4881      	ldr	r0, [pc, #516]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 800123c:	f001 f912 	bl	8002464 <HAL_GPIO_WritePin>
 8001240:	f000 bcfe 	b.w	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 1 && morse_word[1] == 1 && morse_word[2] == 0 && morse_word[3] == 1 && morse_word[4] == 99){		//Q
 8001244:	4b7b      	ldr	r3, [pc, #492]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d139      	bne.n	80012c0 <HAL_TIM_PeriodElapsedCallback+0x890>
 800124c:	4b79      	ldr	r3, [pc, #484]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 800124e:	785b      	ldrb	r3, [r3, #1]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d135      	bne.n	80012c0 <HAL_TIM_PeriodElapsedCallback+0x890>
 8001254:	4b77      	ldr	r3, [pc, #476]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8001256:	789b      	ldrb	r3, [r3, #2]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d131      	bne.n	80012c0 <HAL_TIM_PeriodElapsedCallback+0x890>
 800125c:	4b75      	ldr	r3, [pc, #468]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 800125e:	78db      	ldrb	r3, [r3, #3]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d12d      	bne.n	80012c0 <HAL_TIM_PeriodElapsedCallback+0x890>
 8001264:	4b73      	ldr	r3, [pc, #460]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8001266:	791b      	ldrb	r3, [r3, #4]
 8001268:	2b63      	cmp	r3, #99	; 0x63
 800126a:	d129      	bne.n	80012c0 <HAL_TIM_PeriodElapsedCallback+0x890>
			display_flag = 1;
 800126c:	4b72      	ldr	r3, [pc, #456]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0xa08>)
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 8001272:	2201      	movs	r2, #1
 8001274:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001278:	4870      	ldr	r0, [pc, #448]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 800127a:	f001 f8f3 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2120      	movs	r1, #32
 8001282:	486f      	ldr	r0, [pc, #444]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 8001284:	f001 f8ee 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	2140      	movs	r1, #64	; 0x40
 800128c:	486c      	ldr	r0, [pc, #432]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 800128e:	f001 f8e9 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	2180      	movs	r1, #128	; 0x80
 8001296:	486a      	ldr	r0, [pc, #424]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 8001298:	f001 f8e4 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 800129c:	2201      	movs	r2, #1
 800129e:	2140      	movs	r1, #64	; 0x40
 80012a0:	4866      	ldr	r0, [pc, #408]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 80012a2:	f001 f8df 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 80012a6:	2201      	movs	r2, #1
 80012a8:	2180      	movs	r1, #128	; 0x80
 80012aa:	4866      	ldr	r0, [pc, #408]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0xa14>)
 80012ac:	f001 f8da 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b6:	4862      	ldr	r0, [pc, #392]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 80012b8:	f001 f8d4 	bl	8002464 <HAL_GPIO_WritePin>
 80012bc:	f000 bcc0 	b.w	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 0 && morse_word[1] == 1 && morse_word[2] == 0 && morse_word[3] == 99 && morse_word[4] == 99){		//R
 80012c0:	4b5c      	ldr	r3, [pc, #368]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d139      	bne.n	800133c <HAL_TIM_PeriodElapsedCallback+0x90c>
 80012c8:	4b5a      	ldr	r3, [pc, #360]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 80012ca:	785b      	ldrb	r3, [r3, #1]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d135      	bne.n	800133c <HAL_TIM_PeriodElapsedCallback+0x90c>
 80012d0:	4b58      	ldr	r3, [pc, #352]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 80012d2:	789b      	ldrb	r3, [r3, #2]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d131      	bne.n	800133c <HAL_TIM_PeriodElapsedCallback+0x90c>
 80012d8:	4b56      	ldr	r3, [pc, #344]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 80012da:	78db      	ldrb	r3, [r3, #3]
 80012dc:	2b63      	cmp	r3, #99	; 0x63
 80012de:	d12d      	bne.n	800133c <HAL_TIM_PeriodElapsedCallback+0x90c>
 80012e0:	4b54      	ldr	r3, [pc, #336]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 80012e2:	791b      	ldrb	r3, [r3, #4]
 80012e4:	2b63      	cmp	r3, #99	; 0x63
 80012e6:	d129      	bne.n	800133c <HAL_TIM_PeriodElapsedCallback+0x90c>
			display_flag = 1;
 80012e8:	4b53      	ldr	r3, [pc, #332]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0xa08>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 80012ee:	2201      	movs	r2, #1
 80012f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f4:	4851      	ldr	r0, [pc, #324]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 80012f6:	f001 f8b5 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2120      	movs	r1, #32
 80012fe:	4850      	ldr	r0, [pc, #320]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 8001300:	f001 f8b0 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	2140      	movs	r1, #64	; 0x40
 8001308:	484d      	ldr	r0, [pc, #308]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 800130a:	f001 f8ab 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 800130e:	2201      	movs	r2, #1
 8001310:	2180      	movs	r1, #128	; 0x80
 8001312:	484b      	ldr	r0, [pc, #300]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 8001314:	f001 f8a6 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8001318:	2201      	movs	r2, #1
 800131a:	2140      	movs	r1, #64	; 0x40
 800131c:	4847      	ldr	r0, [pc, #284]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 800131e:	f001 f8a1 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 8001322:	2201      	movs	r2, #1
 8001324:	2180      	movs	r1, #128	; 0x80
 8001326:	4847      	ldr	r0, [pc, #284]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0xa14>)
 8001328:	f001 f89c 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 800132c:	2201      	movs	r2, #1
 800132e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001332:	4843      	ldr	r0, [pc, #268]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 8001334:	f001 f896 	bl	8002464 <HAL_GPIO_WritePin>
 8001338:	f000 bc82 	b.w	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 0 && morse_word[1] == 0 && morse_word[2] == 0 && morse_word[3] == 99 && morse_word[4] == 99){		//S
 800133c:	4b3d      	ldr	r3, [pc, #244]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d139      	bne.n	80013b8 <HAL_TIM_PeriodElapsedCallback+0x988>
 8001344:	4b3b      	ldr	r3, [pc, #236]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8001346:	785b      	ldrb	r3, [r3, #1]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d135      	bne.n	80013b8 <HAL_TIM_PeriodElapsedCallback+0x988>
 800134c:	4b39      	ldr	r3, [pc, #228]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 800134e:	789b      	ldrb	r3, [r3, #2]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d131      	bne.n	80013b8 <HAL_TIM_PeriodElapsedCallback+0x988>
 8001354:	4b37      	ldr	r3, [pc, #220]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8001356:	78db      	ldrb	r3, [r3, #3]
 8001358:	2b63      	cmp	r3, #99	; 0x63
 800135a:	d12d      	bne.n	80013b8 <HAL_TIM_PeriodElapsedCallback+0x988>
 800135c:	4b35      	ldr	r3, [pc, #212]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 800135e:	791b      	ldrb	r3, [r3, #4]
 8001360:	2b63      	cmp	r3, #99	; 0x63
 8001362:	d129      	bne.n	80013b8 <HAL_TIM_PeriodElapsedCallback+0x988>
			display_flag = 1;
 8001364:	4b34      	ldr	r3, [pc, #208]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0xa08>)
 8001366:	2201      	movs	r2, #1
 8001368:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 800136a:	2201      	movs	r2, #1
 800136c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001370:	4832      	ldr	r0, [pc, #200]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 8001372:	f001 f877 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	2120      	movs	r1, #32
 800137a:	4831      	ldr	r0, [pc, #196]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 800137c:	f001 f872 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2140      	movs	r1, #64	; 0x40
 8001384:	482e      	ldr	r0, [pc, #184]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 8001386:	f001 f86d 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 800138a:	2201      	movs	r2, #1
 800138c:	2180      	movs	r1, #128	; 0x80
 800138e:	482c      	ldr	r0, [pc, #176]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 8001390:	f001 f868 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8001394:	2201      	movs	r2, #1
 8001396:	2140      	movs	r1, #64	; 0x40
 8001398:	4828      	ldr	r0, [pc, #160]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 800139a:	f001 f863 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	2180      	movs	r1, #128	; 0x80
 80013a2:	4828      	ldr	r0, [pc, #160]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0xa14>)
 80013a4:	f001 f85e 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ae:	4824      	ldr	r0, [pc, #144]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 80013b0:	f001 f858 	bl	8002464 <HAL_GPIO_WritePin>
 80013b4:	f000 bc44 	b.w	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 1 && morse_word[1] == 99 && morse_word[2] == 99 && morse_word[3] == 99 && morse_word[4] == 99){		//T
 80013b8:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d143      	bne.n	8001448 <HAL_TIM_PeriodElapsedCallback+0xa18>
 80013c0:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 80013c2:	785b      	ldrb	r3, [r3, #1]
 80013c4:	2b63      	cmp	r3, #99	; 0x63
 80013c6:	d13f      	bne.n	8001448 <HAL_TIM_PeriodElapsedCallback+0xa18>
 80013c8:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 80013ca:	789b      	ldrb	r3, [r3, #2]
 80013cc:	2b63      	cmp	r3, #99	; 0x63
 80013ce:	d13b      	bne.n	8001448 <HAL_TIM_PeriodElapsedCallback+0xa18>
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 80013d2:	78db      	ldrb	r3, [r3, #3]
 80013d4:	2b63      	cmp	r3, #99	; 0x63
 80013d6:	d137      	bne.n	8001448 <HAL_TIM_PeriodElapsedCallback+0xa18>
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 80013da:	791b      	ldrb	r3, [r3, #4]
 80013dc:	2b63      	cmp	r3, #99	; 0x63
 80013de:	d133      	bne.n	8001448 <HAL_TIM_PeriodElapsedCallback+0xa18>
			display_flag = 1;
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0xa08>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 80013e6:	2201      	movs	r2, #1
 80013e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ec:	4813      	ldr	r0, [pc, #76]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 80013ee:	f001 f839 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2120      	movs	r1, #32
 80013f6:	4812      	ldr	r0, [pc, #72]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 80013f8:	f001 f834 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2140      	movs	r1, #64	; 0x40
 8001400:	480f      	ldr	r0, [pc, #60]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 8001402:	f001 f82f 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 8001406:	2201      	movs	r2, #1
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	480d      	ldr	r0, [pc, #52]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 800140c:	f001 f82a 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8001410:	2201      	movs	r2, #1
 8001412:	2140      	movs	r1, #64	; 0x40
 8001414:	4809      	ldr	r0, [pc, #36]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 8001416:	f001 f825 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 800141a:	2201      	movs	r2, #1
 800141c:	2180      	movs	r1, #128	; 0x80
 800141e:	4809      	ldr	r0, [pc, #36]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0xa14>)
 8001420:	f001 f820 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 8001424:	2201      	movs	r2, #1
 8001426:	f44f 7100 	mov.w	r1, #512	; 0x200
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 800142c:	f001 f81a 	bl	8002464 <HAL_GPIO_WritePin>
 8001430:	f000 bc06 	b.w	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
 8001434:	20000000 	.word	0x20000000
 8001438:	20000032 	.word	0x20000032
 800143c:	40020400 	.word	0x40020400
 8001440:	40020000 	.word	0x40020000
 8001444:	40020800 	.word	0x40020800
		}
		else if(morse_word[0] == 0 && morse_word[1] == 0 && morse_word[2] == 1 && morse_word[3] == 99 && morse_word[4] == 99){		//U
 8001448:	4b98      	ldr	r3, [pc, #608]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d138      	bne.n	80014c2 <HAL_TIM_PeriodElapsedCallback+0xa92>
 8001450:	4b96      	ldr	r3, [pc, #600]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 8001452:	785b      	ldrb	r3, [r3, #1]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d134      	bne.n	80014c2 <HAL_TIM_PeriodElapsedCallback+0xa92>
 8001458:	4b94      	ldr	r3, [pc, #592]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 800145a:	789b      	ldrb	r3, [r3, #2]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d130      	bne.n	80014c2 <HAL_TIM_PeriodElapsedCallback+0xa92>
 8001460:	4b92      	ldr	r3, [pc, #584]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 8001462:	78db      	ldrb	r3, [r3, #3]
 8001464:	2b63      	cmp	r3, #99	; 0x63
 8001466:	d12c      	bne.n	80014c2 <HAL_TIM_PeriodElapsedCallback+0xa92>
 8001468:	4b90      	ldr	r3, [pc, #576]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 800146a:	791b      	ldrb	r3, [r3, #4]
 800146c:	2b63      	cmp	r3, #99	; 0x63
 800146e:	d128      	bne.n	80014c2 <HAL_TIM_PeriodElapsedCallback+0xa92>
			display_flag = 1;
 8001470:	4b8f      	ldr	r3, [pc, #572]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8001472:	2201      	movs	r2, #1
 8001474:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147c:	488d      	ldr	r0, [pc, #564]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 800147e:	f000 fff1 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_SET);
 8001482:	2201      	movs	r2, #1
 8001484:	2120      	movs	r1, #32
 8001486:	488c      	ldr	r0, [pc, #560]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8001488:	f000 ffec 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	2140      	movs	r1, #64	; 0x40
 8001490:	4889      	ldr	r0, [pc, #548]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8001492:	f000 ffe7 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 8001496:	2201      	movs	r2, #1
 8001498:	2180      	movs	r1, #128	; 0x80
 800149a:	4887      	ldr	r0, [pc, #540]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 800149c:	f000 ffe2 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 80014a0:	2201      	movs	r2, #1
 80014a2:	2140      	movs	r1, #64	; 0x40
 80014a4:	4883      	ldr	r0, [pc, #524]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 80014a6:	f000 ffdd 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 80014aa:	2201      	movs	r2, #1
 80014ac:	2180      	movs	r1, #128	; 0x80
 80014ae:	4883      	ldr	r0, [pc, #524]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 80014b0:	f000 ffd8 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ba:	487f      	ldr	r0, [pc, #508]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 80014bc:	f000 ffd2 	bl	8002464 <HAL_GPIO_WritePin>
 80014c0:	e3be      	b.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 0 && morse_word[1] == 0 && morse_word[2] == 0 && morse_word[3] == 1 && morse_word[4] == 99){		//V
 80014c2:	4b7a      	ldr	r3, [pc, #488]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d138      	bne.n	800153c <HAL_TIM_PeriodElapsedCallback+0xb0c>
 80014ca:	4b78      	ldr	r3, [pc, #480]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 80014cc:	785b      	ldrb	r3, [r3, #1]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d134      	bne.n	800153c <HAL_TIM_PeriodElapsedCallback+0xb0c>
 80014d2:	4b76      	ldr	r3, [pc, #472]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 80014d4:	789b      	ldrb	r3, [r3, #2]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d130      	bne.n	800153c <HAL_TIM_PeriodElapsedCallback+0xb0c>
 80014da:	4b74      	ldr	r3, [pc, #464]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 80014dc:	78db      	ldrb	r3, [r3, #3]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d12c      	bne.n	800153c <HAL_TIM_PeriodElapsedCallback+0xb0c>
 80014e2:	4b72      	ldr	r3, [pc, #456]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 80014e4:	791b      	ldrb	r3, [r3, #4]
 80014e6:	2b63      	cmp	r3, #99	; 0x63
 80014e8:	d128      	bne.n	800153c <HAL_TIM_PeriodElapsedCallback+0xb0c>
			display_flag = 1;
 80014ea:	4b71      	ldr	r3, [pc, #452]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 80014f0:	2201      	movs	r2, #1
 80014f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f6:	486f      	ldr	r0, [pc, #444]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 80014f8:	f000 ffb4 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2120      	movs	r1, #32
 8001500:	486d      	ldr	r0, [pc, #436]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8001502:	f000 ffaf 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	2140      	movs	r1, #64	; 0x40
 800150a:	486b      	ldr	r0, [pc, #428]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 800150c:	f000 ffaa 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 8001510:	2201      	movs	r2, #1
 8001512:	2180      	movs	r1, #128	; 0x80
 8001514:	4868      	ldr	r0, [pc, #416]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8001516:	f000 ffa5 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 800151a:	2201      	movs	r2, #1
 800151c:	2140      	movs	r1, #64	; 0x40
 800151e:	4865      	ldr	r0, [pc, #404]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 8001520:	f000 ffa0 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 8001524:	2201      	movs	r2, #1
 8001526:	2180      	movs	r1, #128	; 0x80
 8001528:	4864      	ldr	r0, [pc, #400]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 800152a:	f000 ff9b 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 800152e:	2201      	movs	r2, #1
 8001530:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001534:	4860      	ldr	r0, [pc, #384]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8001536:	f000 ff95 	bl	8002464 <HAL_GPIO_WritePin>
 800153a:	e381      	b.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 0 && morse_word[1] == 1 && morse_word[2] == 1 && morse_word[3] == 99 && morse_word[4] == 99){		//W
 800153c:	4b5b      	ldr	r3, [pc, #364]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d138      	bne.n	80015b6 <HAL_TIM_PeriodElapsedCallback+0xb86>
 8001544:	4b59      	ldr	r3, [pc, #356]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 8001546:	785b      	ldrb	r3, [r3, #1]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d134      	bne.n	80015b6 <HAL_TIM_PeriodElapsedCallback+0xb86>
 800154c:	4b57      	ldr	r3, [pc, #348]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 800154e:	789b      	ldrb	r3, [r3, #2]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d130      	bne.n	80015b6 <HAL_TIM_PeriodElapsedCallback+0xb86>
 8001554:	4b55      	ldr	r3, [pc, #340]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 8001556:	78db      	ldrb	r3, [r3, #3]
 8001558:	2b63      	cmp	r3, #99	; 0x63
 800155a:	d12c      	bne.n	80015b6 <HAL_TIM_PeriodElapsedCallback+0xb86>
 800155c:	4b53      	ldr	r3, [pc, #332]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 800155e:	791b      	ldrb	r3, [r3, #4]
 8001560:	2b63      	cmp	r3, #99	; 0x63
 8001562:	d128      	bne.n	80015b6 <HAL_TIM_PeriodElapsedCallback+0xb86>
			display_flag = 1;
 8001564:	4b52      	ldr	r3, [pc, #328]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 800156a:	2201      	movs	r2, #1
 800156c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001570:	4850      	ldr	r0, [pc, #320]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 8001572:	f000 ff77 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	2120      	movs	r1, #32
 800157a:	484f      	ldr	r0, [pc, #316]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 800157c:	f000 ff72 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	2140      	movs	r1, #64	; 0x40
 8001584:	484c      	ldr	r0, [pc, #304]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8001586:	f000 ff6d 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 800158a:	2201      	movs	r2, #1
 800158c:	2180      	movs	r1, #128	; 0x80
 800158e:	484a      	ldr	r0, [pc, #296]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8001590:	f000 ff68 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8001594:	2201      	movs	r2, #1
 8001596:	2140      	movs	r1, #64	; 0x40
 8001598:	4846      	ldr	r0, [pc, #280]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 800159a:	f000 ff63 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 800159e:	2201      	movs	r2, #1
 80015a0:	2180      	movs	r1, #128	; 0x80
 80015a2:	4846      	ldr	r0, [pc, #280]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 80015a4:	f000 ff5e 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 80015a8:	2201      	movs	r2, #1
 80015aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ae:	4842      	ldr	r0, [pc, #264]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 80015b0:	f000 ff58 	bl	8002464 <HAL_GPIO_WritePin>
 80015b4:	e344      	b.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 1 && morse_word[1] == 0 && morse_word[2] == 0 && morse_word[3] == 1 && morse_word[4] == 99){		//X
 80015b6:	4b3d      	ldr	r3, [pc, #244]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d138      	bne.n	8001630 <HAL_TIM_PeriodElapsedCallback+0xc00>
 80015be:	4b3b      	ldr	r3, [pc, #236]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 80015c0:	785b      	ldrb	r3, [r3, #1]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d134      	bne.n	8001630 <HAL_TIM_PeriodElapsedCallback+0xc00>
 80015c6:	4b39      	ldr	r3, [pc, #228]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 80015c8:	789b      	ldrb	r3, [r3, #2]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d130      	bne.n	8001630 <HAL_TIM_PeriodElapsedCallback+0xc00>
 80015ce:	4b37      	ldr	r3, [pc, #220]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 80015d0:	78db      	ldrb	r3, [r3, #3]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d12c      	bne.n	8001630 <HAL_TIM_PeriodElapsedCallback+0xc00>
 80015d6:	4b35      	ldr	r3, [pc, #212]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 80015d8:	791b      	ldrb	r3, [r3, #4]
 80015da:	2b63      	cmp	r3, #99	; 0x63
 80015dc:	d128      	bne.n	8001630 <HAL_TIM_PeriodElapsedCallback+0xc00>
			display_flag = 1;
 80015de:	4b34      	ldr	r3, [pc, #208]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 80015e4:	2201      	movs	r2, #1
 80015e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ea:	4832      	ldr	r0, [pc, #200]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 80015ec:	f000 ff3a 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2120      	movs	r1, #32
 80015f4:	4830      	ldr	r0, [pc, #192]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 80015f6:	f000 ff35 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2140      	movs	r1, #64	; 0x40
 80015fe:	482e      	ldr	r0, [pc, #184]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8001600:	f000 ff30 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 8001604:	2201      	movs	r2, #1
 8001606:	2180      	movs	r1, #128	; 0x80
 8001608:	482b      	ldr	r0, [pc, #172]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 800160a:	f000 ff2b 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 800160e:	2201      	movs	r2, #1
 8001610:	2140      	movs	r1, #64	; 0x40
 8001612:	4828      	ldr	r0, [pc, #160]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 8001614:	f000 ff26 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 8001618:	2201      	movs	r2, #1
 800161a:	2180      	movs	r1, #128	; 0x80
 800161c:	4827      	ldr	r0, [pc, #156]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 800161e:	f000 ff21 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 8001622:	2201      	movs	r2, #1
 8001624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001628:	4823      	ldr	r0, [pc, #140]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 800162a:	f000 ff1b 	bl	8002464 <HAL_GPIO_WritePin>
 800162e:	e307      	b.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 1 && morse_word[1] == 0 && morse_word[2] == 1 && morse_word[3] == 1 && morse_word[4] == 99){		//Y
 8001630:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d143      	bne.n	80016c0 <HAL_TIM_PeriodElapsedCallback+0xc90>
 8001638:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 800163a:	785b      	ldrb	r3, [r3, #1]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d13f      	bne.n	80016c0 <HAL_TIM_PeriodElapsedCallback+0xc90>
 8001640:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 8001642:	789b      	ldrb	r3, [r3, #2]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d13b      	bne.n	80016c0 <HAL_TIM_PeriodElapsedCallback+0xc90>
 8001648:	4b18      	ldr	r3, [pc, #96]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 800164a:	78db      	ldrb	r3, [r3, #3]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d137      	bne.n	80016c0 <HAL_TIM_PeriodElapsedCallback+0xc90>
 8001650:	4b16      	ldr	r3, [pc, #88]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 8001652:	791b      	ldrb	r3, [r3, #4]
 8001654:	2b63      	cmp	r3, #99	; 0x63
 8001656:	d133      	bne.n	80016c0 <HAL_TIM_PeriodElapsedCallback+0xc90>
			display_flag = 1;
 8001658:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 800165e:	2201      	movs	r2, #1
 8001660:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001664:	4813      	ldr	r0, [pc, #76]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 8001666:	f000 fefd 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	2120      	movs	r1, #32
 800166e:	4812      	ldr	r0, [pc, #72]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8001670:	f000 fef8 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	2140      	movs	r1, #64	; 0x40
 8001678:	480f      	ldr	r0, [pc, #60]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 800167a:	f000 fef3 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 800167e:	2201      	movs	r2, #1
 8001680:	2180      	movs	r1, #128	; 0x80
 8001682:	480d      	ldr	r0, [pc, #52]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8001684:	f000 feee 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8001688:	2201      	movs	r2, #1
 800168a:	2140      	movs	r1, #64	; 0x40
 800168c:	4809      	ldr	r0, [pc, #36]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 800168e:	f000 fee9 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 8001692:	2201      	movs	r2, #1
 8001694:	2180      	movs	r1, #128	; 0x80
 8001696:	4809      	ldr	r0, [pc, #36]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 8001698:	f000 fee4 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 80016a4:	f000 fede 	bl	8002464 <HAL_GPIO_WritePin>
 80016a8:	e2ca      	b.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
 80016aa:	bf00      	nop
 80016ac:	20000000 	.word	0x20000000
 80016b0:	20000032 	.word	0x20000032
 80016b4:	40020400 	.word	0x40020400
 80016b8:	40020000 	.word	0x40020000
 80016bc:	40020800 	.word	0x40020800
		}
		else if(morse_word[0] == 1 && morse_word[1] == 1 && morse_word[2] == 0 && morse_word[3] == 0 && morse_word[4] == 99){		//Z
 80016c0:	4b98      	ldr	r3, [pc, #608]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d138      	bne.n	800173a <HAL_TIM_PeriodElapsedCallback+0xd0a>
 80016c8:	4b96      	ldr	r3, [pc, #600]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 80016ca:	785b      	ldrb	r3, [r3, #1]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d134      	bne.n	800173a <HAL_TIM_PeriodElapsedCallback+0xd0a>
 80016d0:	4b94      	ldr	r3, [pc, #592]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 80016d2:	789b      	ldrb	r3, [r3, #2]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d130      	bne.n	800173a <HAL_TIM_PeriodElapsedCallback+0xd0a>
 80016d8:	4b92      	ldr	r3, [pc, #584]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 80016da:	78db      	ldrb	r3, [r3, #3]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d12c      	bne.n	800173a <HAL_TIM_PeriodElapsedCallback+0xd0a>
 80016e0:	4b90      	ldr	r3, [pc, #576]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 80016e2:	791b      	ldrb	r3, [r3, #4]
 80016e4:	2b63      	cmp	r3, #99	; 0x63
 80016e6:	d128      	bne.n	800173a <HAL_TIM_PeriodElapsedCallback+0xd0a>
			display_flag = 1;
 80016e8:	4b8f      	ldr	r3, [pc, #572]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016f4:	488d      	ldr	r0, [pc, #564]	; (800192c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80016f6:	f000 feb5 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2120      	movs	r1, #32
 80016fe:	488c      	ldr	r0, [pc, #560]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 8001700:	f000 feb0 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	2140      	movs	r1, #64	; 0x40
 8001708:	4889      	ldr	r0, [pc, #548]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 800170a:	f000 feab 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 800170e:	2201      	movs	r2, #1
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	4887      	ldr	r0, [pc, #540]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 8001714:	f000 fea6 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8001718:	2201      	movs	r2, #1
 800171a:	2140      	movs	r1, #64	; 0x40
 800171c:	4883      	ldr	r0, [pc, #524]	; (800192c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 800171e:	f000 fea1 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 8001722:	2201      	movs	r2, #1
 8001724:	2180      	movs	r1, #128	; 0x80
 8001726:	4883      	ldr	r0, [pc, #524]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0xf04>)
 8001728:	f000 fe9c 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 800172c:	2201      	movs	r2, #1
 800172e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001732:	487f      	ldr	r0, [pc, #508]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 8001734:	f000 fe96 	bl	8002464 <HAL_GPIO_WritePin>
 8001738:	e282      	b.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 1 && morse_word[1] == 1 && morse_word[2] == 1 && morse_word[3] == 1 && morse_word[4] == 1){		//0
 800173a:	4b7a      	ldr	r3, [pc, #488]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d138      	bne.n	80017b4 <HAL_TIM_PeriodElapsedCallback+0xd84>
 8001742:	4b78      	ldr	r3, [pc, #480]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 8001744:	785b      	ldrb	r3, [r3, #1]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d134      	bne.n	80017b4 <HAL_TIM_PeriodElapsedCallback+0xd84>
 800174a:	4b76      	ldr	r3, [pc, #472]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 800174c:	789b      	ldrb	r3, [r3, #2]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d130      	bne.n	80017b4 <HAL_TIM_PeriodElapsedCallback+0xd84>
 8001752:	4b74      	ldr	r3, [pc, #464]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 8001754:	78db      	ldrb	r3, [r3, #3]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d12c      	bne.n	80017b4 <HAL_TIM_PeriodElapsedCallback+0xd84>
 800175a:	4b72      	ldr	r3, [pc, #456]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 800175c:	791b      	ldrb	r3, [r3, #4]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d128      	bne.n	80017b4 <HAL_TIM_PeriodElapsedCallback+0xd84>
			display_flag = 1;
 8001762:	4b71      	ldr	r3, [pc, #452]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 8001764:	2201      	movs	r2, #1
 8001766:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 8001768:	2201      	movs	r2, #1
 800176a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800176e:	486f      	ldr	r0, [pc, #444]	; (800192c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 8001770:	f000 fe78 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_SET);
 8001774:	2201      	movs	r2, #1
 8001776:	2120      	movs	r1, #32
 8001778:	486d      	ldr	r0, [pc, #436]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 800177a:	f000 fe73 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_SET);
 800177e:	2201      	movs	r2, #1
 8001780:	2140      	movs	r1, #64	; 0x40
 8001782:	486b      	ldr	r0, [pc, #428]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 8001784:	f000 fe6e 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 8001788:	2201      	movs	r2, #1
 800178a:	2180      	movs	r1, #128	; 0x80
 800178c:	4868      	ldr	r0, [pc, #416]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 800178e:	f000 fe69 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8001792:	2201      	movs	r2, #1
 8001794:	2140      	movs	r1, #64	; 0x40
 8001796:	4865      	ldr	r0, [pc, #404]	; (800192c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 8001798:	f000 fe64 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 800179c:	2201      	movs	r2, #1
 800179e:	2180      	movs	r1, #128	; 0x80
 80017a0:	4864      	ldr	r0, [pc, #400]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0xf04>)
 80017a2:	f000 fe5f 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_RESET);
 80017a6:	2200      	movs	r2, #0
 80017a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ac:	4860      	ldr	r0, [pc, #384]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 80017ae:	f000 fe59 	bl	8002464 <HAL_GPIO_WritePin>
 80017b2:	e245      	b.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 0 && morse_word[1] == 1 && morse_word[2] == 1 && morse_word[3] == 1 && morse_word[4] == 1){		//1
 80017b4:	4b5b      	ldr	r3, [pc, #364]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d138      	bne.n	800182e <HAL_TIM_PeriodElapsedCallback+0xdfe>
 80017bc:	4b59      	ldr	r3, [pc, #356]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 80017be:	785b      	ldrb	r3, [r3, #1]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d134      	bne.n	800182e <HAL_TIM_PeriodElapsedCallback+0xdfe>
 80017c4:	4b57      	ldr	r3, [pc, #348]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 80017c6:	789b      	ldrb	r3, [r3, #2]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d130      	bne.n	800182e <HAL_TIM_PeriodElapsedCallback+0xdfe>
 80017cc:	4b55      	ldr	r3, [pc, #340]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 80017ce:	78db      	ldrb	r3, [r3, #3]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d12c      	bne.n	800182e <HAL_TIM_PeriodElapsedCallback+0xdfe>
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 80017d6:	791b      	ldrb	r3, [r3, #4]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d128      	bne.n	800182e <HAL_TIM_PeriodElapsedCallback+0xdfe>
			display_flag = 1;
 80017dc:	4b52      	ldr	r3, [pc, #328]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e8:	4850      	ldr	r0, [pc, #320]	; (800192c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80017ea:	f000 fe3b 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_SET);
 80017ee:	2201      	movs	r2, #1
 80017f0:	2120      	movs	r1, #32
 80017f2:	484f      	ldr	r0, [pc, #316]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 80017f4:	f000 fe36 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_SET);
 80017f8:	2201      	movs	r2, #1
 80017fa:	2140      	movs	r1, #64	; 0x40
 80017fc:	484c      	ldr	r0, [pc, #304]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 80017fe:	f000 fe31 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	2180      	movs	r1, #128	; 0x80
 8001806:	484a      	ldr	r0, [pc, #296]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 8001808:	f000 fe2c 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_RESET);
 800180c:	2200      	movs	r2, #0
 800180e:	2140      	movs	r1, #64	; 0x40
 8001810:	4846      	ldr	r0, [pc, #280]	; (800192c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 8001812:	f000 fe27 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	2180      	movs	r1, #128	; 0x80
 800181a:	4846      	ldr	r0, [pc, #280]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0xf04>)
 800181c:	f000 fe22 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001826:	4842      	ldr	r0, [pc, #264]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 8001828:	f000 fe1c 	bl	8002464 <HAL_GPIO_WritePin>
 800182c:	e208      	b.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 0 && morse_word[1] == 0 && morse_word[2] == 1 && morse_word[3] == 1 && morse_word[4] == 1){		//2
 800182e:	4b3d      	ldr	r3, [pc, #244]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d138      	bne.n	80018a8 <HAL_TIM_PeriodElapsedCallback+0xe78>
 8001836:	4b3b      	ldr	r3, [pc, #236]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 8001838:	785b      	ldrb	r3, [r3, #1]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d134      	bne.n	80018a8 <HAL_TIM_PeriodElapsedCallback+0xe78>
 800183e:	4b39      	ldr	r3, [pc, #228]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 8001840:	789b      	ldrb	r3, [r3, #2]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d130      	bne.n	80018a8 <HAL_TIM_PeriodElapsedCallback+0xe78>
 8001846:	4b37      	ldr	r3, [pc, #220]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 8001848:	78db      	ldrb	r3, [r3, #3]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d12c      	bne.n	80018a8 <HAL_TIM_PeriodElapsedCallback+0xe78>
 800184e:	4b35      	ldr	r3, [pc, #212]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 8001850:	791b      	ldrb	r3, [r3, #4]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d128      	bne.n	80018a8 <HAL_TIM_PeriodElapsedCallback+0xe78>
			display_flag = 1;
 8001856:	4b34      	ldr	r3, [pc, #208]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001862:	4832      	ldr	r0, [pc, #200]	; (800192c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 8001864:	f000 fdfe 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_SET);
 8001868:	2201      	movs	r2, #1
 800186a:	2120      	movs	r1, #32
 800186c:	4830      	ldr	r0, [pc, #192]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 800186e:	f000 fdf9 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 8001872:	2200      	movs	r2, #0
 8001874:	2140      	movs	r1, #64	; 0x40
 8001876:	482e      	ldr	r0, [pc, #184]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 8001878:	f000 fdf4 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 800187c:	2201      	movs	r2, #1
 800187e:	2180      	movs	r1, #128	; 0x80
 8001880:	482b      	ldr	r0, [pc, #172]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 8001882:	f000 fdef 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8001886:	2201      	movs	r2, #1
 8001888:	2140      	movs	r1, #64	; 0x40
 800188a:	4828      	ldr	r0, [pc, #160]	; (800192c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 800188c:	f000 fdea 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_RESET);
 8001890:	2200      	movs	r2, #0
 8001892:	2180      	movs	r1, #128	; 0x80
 8001894:	4827      	ldr	r0, [pc, #156]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0xf04>)
 8001896:	f000 fde5 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 800189a:	2201      	movs	r2, #1
 800189c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018a0:	4823      	ldr	r0, [pc, #140]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 80018a2:	f000 fddf 	bl	8002464 <HAL_GPIO_WritePin>
 80018a6:	e1cb      	b.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 0 && morse_word[1] == 0 && morse_word[2] == 0 && morse_word[3] == 1 && morse_word[4] == 1){		//3
 80018a8:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d143      	bne.n	8001938 <HAL_TIM_PeriodElapsedCallback+0xf08>
 80018b0:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 80018b2:	785b      	ldrb	r3, [r3, #1]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d13f      	bne.n	8001938 <HAL_TIM_PeriodElapsedCallback+0xf08>
 80018b8:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 80018ba:	789b      	ldrb	r3, [r3, #2]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d13b      	bne.n	8001938 <HAL_TIM_PeriodElapsedCallback+0xf08>
 80018c0:	4b18      	ldr	r3, [pc, #96]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 80018c2:	78db      	ldrb	r3, [r3, #3]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d137      	bne.n	8001938 <HAL_TIM_PeriodElapsedCallback+0xf08>
 80018c8:	4b16      	ldr	r3, [pc, #88]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 80018ca:	791b      	ldrb	r3, [r3, #4]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d133      	bne.n	8001938 <HAL_TIM_PeriodElapsedCallback+0xf08>
			display_flag = 1;
 80018d0:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 80018d6:	2201      	movs	r2, #1
 80018d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018dc:	4813      	ldr	r0, [pc, #76]	; (800192c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80018de:	f000 fdc1 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_SET);
 80018e2:	2201      	movs	r2, #1
 80018e4:	2120      	movs	r1, #32
 80018e6:	4812      	ldr	r0, [pc, #72]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 80018e8:	f000 fdbc 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_SET);
 80018ec:	2201      	movs	r2, #1
 80018ee:	2140      	movs	r1, #64	; 0x40
 80018f0:	480f      	ldr	r0, [pc, #60]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 80018f2:	f000 fdb7 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 80018f6:	2201      	movs	r2, #1
 80018f8:	2180      	movs	r1, #128	; 0x80
 80018fa:	480d      	ldr	r0, [pc, #52]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 80018fc:	f000 fdb2 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	2140      	movs	r1, #64	; 0x40
 8001904:	4809      	ldr	r0, [pc, #36]	; (800192c <HAL_TIM_PeriodElapsedCallback+0xefc>)
 8001906:	f000 fdad 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	4809      	ldr	r0, [pc, #36]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0xf04>)
 8001910:	f000 fda8 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 8001914:	2201      	movs	r2, #1
 8001916:	f44f 7100 	mov.w	r1, #512	; 0x200
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 800191c:	f000 fda2 	bl	8002464 <HAL_GPIO_WritePin>
 8001920:	e18e      	b.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
 8001922:	bf00      	nop
 8001924:	20000000 	.word	0x20000000
 8001928:	20000032 	.word	0x20000032
 800192c:	40020400 	.word	0x40020400
 8001930:	40020000 	.word	0x40020000
 8001934:	40020800 	.word	0x40020800
		}
		else if(morse_word[0] == 0 && morse_word[1] == 0 && morse_word[2] == 0 && morse_word[3] == 0 && morse_word[4] == 1){		//4
 8001938:	4b98      	ldr	r3, [pc, #608]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d138      	bne.n	80019b2 <HAL_TIM_PeriodElapsedCallback+0xf82>
 8001940:	4b96      	ldr	r3, [pc, #600]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 8001942:	785b      	ldrb	r3, [r3, #1]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d134      	bne.n	80019b2 <HAL_TIM_PeriodElapsedCallback+0xf82>
 8001948:	4b94      	ldr	r3, [pc, #592]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 800194a:	789b      	ldrb	r3, [r3, #2]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d130      	bne.n	80019b2 <HAL_TIM_PeriodElapsedCallback+0xf82>
 8001950:	4b92      	ldr	r3, [pc, #584]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 8001952:	78db      	ldrb	r3, [r3, #3]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d12c      	bne.n	80019b2 <HAL_TIM_PeriodElapsedCallback+0xf82>
 8001958:	4b90      	ldr	r3, [pc, #576]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 800195a:	791b      	ldrb	r3, [r3, #4]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d128      	bne.n	80019b2 <HAL_TIM_PeriodElapsedCallback+0xf82>
			display_flag = 1;
 8001960:	4b8f      	ldr	r3, [pc, #572]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x1170>)
 8001962:	2201      	movs	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	f44f 7100 	mov.w	r1, #512	; 0x200
 800196c:	488d      	ldr	r0, [pc, #564]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x1174>)
 800196e:	f000 fd79 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_SET);
 8001972:	2201      	movs	r2, #1
 8001974:	2120      	movs	r1, #32
 8001976:	488c      	ldr	r0, [pc, #560]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 8001978:	f000 fd74 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_SET);
 800197c:	2201      	movs	r2, #1
 800197e:	2140      	movs	r1, #64	; 0x40
 8001980:	4889      	ldr	r0, [pc, #548]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 8001982:	f000 fd6f 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	2180      	movs	r1, #128	; 0x80
 800198a:	4887      	ldr	r0, [pc, #540]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 800198c:	f000 fd6a 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_RESET);
 8001990:	2200      	movs	r2, #0
 8001992:	2140      	movs	r1, #64	; 0x40
 8001994:	4883      	ldr	r0, [pc, #524]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x1174>)
 8001996:	f000 fd65 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 800199a:	2201      	movs	r2, #1
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	4883      	ldr	r0, [pc, #524]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x117c>)
 80019a0:	f000 fd60 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 80019a4:	2201      	movs	r2, #1
 80019a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019aa:	487f      	ldr	r0, [pc, #508]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 80019ac:	f000 fd5a 	bl	8002464 <HAL_GPIO_WritePin>
 80019b0:	e146      	b.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 0 && morse_word[1] == 0 && morse_word[2] == 0 && morse_word[3] == 0 && morse_word[4] == 0){		//5
 80019b2:	4b7a      	ldr	r3, [pc, #488]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d138      	bne.n	8001a2c <HAL_TIM_PeriodElapsedCallback+0xffc>
 80019ba:	4b78      	ldr	r3, [pc, #480]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 80019bc:	785b      	ldrb	r3, [r3, #1]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d134      	bne.n	8001a2c <HAL_TIM_PeriodElapsedCallback+0xffc>
 80019c2:	4b76      	ldr	r3, [pc, #472]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 80019c4:	789b      	ldrb	r3, [r3, #2]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d130      	bne.n	8001a2c <HAL_TIM_PeriodElapsedCallback+0xffc>
 80019ca:	4b74      	ldr	r3, [pc, #464]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 80019cc:	78db      	ldrb	r3, [r3, #3]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d12c      	bne.n	8001a2c <HAL_TIM_PeriodElapsedCallback+0xffc>
 80019d2:	4b72      	ldr	r3, [pc, #456]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 80019d4:	791b      	ldrb	r3, [r3, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d128      	bne.n	8001a2c <HAL_TIM_PeriodElapsedCallback+0xffc>
			display_flag = 1;
 80019da:	4b71      	ldr	r3, [pc, #452]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x1170>)
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 80019e0:	2201      	movs	r2, #1
 80019e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019e6:	486f      	ldr	r0, [pc, #444]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x1174>)
 80019e8:	f000 fd3c 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2120      	movs	r1, #32
 80019f0:	486d      	ldr	r0, [pc, #436]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 80019f2:	f000 fd37 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_SET);
 80019f6:	2201      	movs	r2, #1
 80019f8:	2140      	movs	r1, #64	; 0x40
 80019fa:	486b      	ldr	r0, [pc, #428]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 80019fc:	f000 fd32 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 8001a00:	2201      	movs	r2, #1
 8001a02:	2180      	movs	r1, #128	; 0x80
 8001a04:	4868      	ldr	r0, [pc, #416]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 8001a06:	f000 fd2d 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_RESET);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2140      	movs	r1, #64	; 0x40
 8001a0e:	4865      	ldr	r0, [pc, #404]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x1174>)
 8001a10:	f000 fd28 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 8001a14:	2201      	movs	r2, #1
 8001a16:	2180      	movs	r1, #128	; 0x80
 8001a18:	4864      	ldr	r0, [pc, #400]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x117c>)
 8001a1a:	f000 fd23 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a24:	4860      	ldr	r0, [pc, #384]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 8001a26:	f000 fd1d 	bl	8002464 <HAL_GPIO_WritePin>
 8001a2a:	e109      	b.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 1 && morse_word[1] == 0 && morse_word[2] == 0 && morse_word[3] == 0 && morse_word[4] == 0){		//6
 8001a2c:	4b5b      	ldr	r3, [pc, #364]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d138      	bne.n	8001aa6 <HAL_TIM_PeriodElapsedCallback+0x1076>
 8001a34:	4b59      	ldr	r3, [pc, #356]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 8001a36:	785b      	ldrb	r3, [r3, #1]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d134      	bne.n	8001aa6 <HAL_TIM_PeriodElapsedCallback+0x1076>
 8001a3c:	4b57      	ldr	r3, [pc, #348]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 8001a3e:	789b      	ldrb	r3, [r3, #2]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d130      	bne.n	8001aa6 <HAL_TIM_PeriodElapsedCallback+0x1076>
 8001a44:	4b55      	ldr	r3, [pc, #340]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 8001a46:	78db      	ldrb	r3, [r3, #3]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d12c      	bne.n	8001aa6 <HAL_TIM_PeriodElapsedCallback+0x1076>
 8001a4c:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 8001a4e:	791b      	ldrb	r3, [r3, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d128      	bne.n	8001aa6 <HAL_TIM_PeriodElapsedCallback+0x1076>
			display_flag = 1;
 8001a54:	4b52      	ldr	r3, [pc, #328]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x1170>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a60:	4850      	ldr	r0, [pc, #320]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x1174>)
 8001a62:	f000 fcff 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2120      	movs	r1, #32
 8001a6a:	484f      	ldr	r0, [pc, #316]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 8001a6c:	f000 fcfa 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_SET);
 8001a70:	2201      	movs	r2, #1
 8001a72:	2140      	movs	r1, #64	; 0x40
 8001a74:	484c      	ldr	r0, [pc, #304]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 8001a76:	f000 fcf5 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	2180      	movs	r1, #128	; 0x80
 8001a7e:	484a      	ldr	r0, [pc, #296]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 8001a80:	f000 fcf0 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8001a84:	2201      	movs	r2, #1
 8001a86:	2140      	movs	r1, #64	; 0x40
 8001a88:	4846      	ldr	r0, [pc, #280]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x1174>)
 8001a8a:	f000 fceb 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 8001a8e:	2201      	movs	r2, #1
 8001a90:	2180      	movs	r1, #128	; 0x80
 8001a92:	4846      	ldr	r0, [pc, #280]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x117c>)
 8001a94:	f000 fce6 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a9e:	4842      	ldr	r0, [pc, #264]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 8001aa0:	f000 fce0 	bl	8002464 <HAL_GPIO_WritePin>
 8001aa4:	e0cc      	b.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 1 && morse_word[1] == 1 && morse_word[2] == 0 && morse_word[3] == 0 && morse_word[4] == 0){		//7
 8001aa6:	4b3d      	ldr	r3, [pc, #244]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d138      	bne.n	8001b20 <HAL_TIM_PeriodElapsedCallback+0x10f0>
 8001aae:	4b3b      	ldr	r3, [pc, #236]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 8001ab0:	785b      	ldrb	r3, [r3, #1]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d134      	bne.n	8001b20 <HAL_TIM_PeriodElapsedCallback+0x10f0>
 8001ab6:	4b39      	ldr	r3, [pc, #228]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 8001ab8:	789b      	ldrb	r3, [r3, #2]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d130      	bne.n	8001b20 <HAL_TIM_PeriodElapsedCallback+0x10f0>
 8001abe:	4b37      	ldr	r3, [pc, #220]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 8001ac0:	78db      	ldrb	r3, [r3, #3]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d12c      	bne.n	8001b20 <HAL_TIM_PeriodElapsedCallback+0x10f0>
 8001ac6:	4b35      	ldr	r3, [pc, #212]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 8001ac8:	791b      	ldrb	r3, [r3, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d128      	bne.n	8001b20 <HAL_TIM_PeriodElapsedCallback+0x10f0>
			display_flag = 1;
 8001ace:	4b34      	ldr	r3, [pc, #208]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x1170>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ada:	4832      	ldr	r0, [pc, #200]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x1174>)
 8001adc:	f000 fcc2 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_SET);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	2120      	movs	r1, #32
 8001ae4:	4830      	ldr	r0, [pc, #192]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 8001ae6:	f000 fcbd 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_SET);
 8001aea:	2201      	movs	r2, #1
 8001aec:	2140      	movs	r1, #64	; 0x40
 8001aee:	482e      	ldr	r0, [pc, #184]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 8001af0:	f000 fcb8 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2180      	movs	r1, #128	; 0x80
 8001af8:	482b      	ldr	r0, [pc, #172]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 8001afa:	f000 fcb3 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_RESET);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2140      	movs	r1, #64	; 0x40
 8001b02:	4828      	ldr	r0, [pc, #160]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x1174>)
 8001b04:	f000 fcae 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_RESET);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2180      	movs	r1, #128	; 0x80
 8001b0c:	4827      	ldr	r0, [pc, #156]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x117c>)
 8001b0e:	f000 fca9 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_RESET);
 8001b12:	2200      	movs	r2, #0
 8001b14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b18:	4823      	ldr	r0, [pc, #140]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 8001b1a:	f000 fca3 	bl	8002464 <HAL_GPIO_WritePin>
 8001b1e:	e08f      	b.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 1 && morse_word[1] == 1 && morse_word[2] == 1 && morse_word[3] == 0 && morse_word[4] == 0){		//8
 8001b20:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d143      	bne.n	8001bb0 <HAL_TIM_PeriodElapsedCallback+0x1180>
 8001b28:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 8001b2a:	785b      	ldrb	r3, [r3, #1]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d13f      	bne.n	8001bb0 <HAL_TIM_PeriodElapsedCallback+0x1180>
 8001b30:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 8001b32:	789b      	ldrb	r3, [r3, #2]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d13b      	bne.n	8001bb0 <HAL_TIM_PeriodElapsedCallback+0x1180>
 8001b38:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 8001b3a:	78db      	ldrb	r3, [r3, #3]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d137      	bne.n	8001bb0 <HAL_TIM_PeriodElapsedCallback+0x1180>
 8001b40:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 8001b42:	791b      	ldrb	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d133      	bne.n	8001bb0 <HAL_TIM_PeriodElapsedCallback+0x1180>
			display_flag = 1;
 8001b48:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x1170>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b54:	4813      	ldr	r0, [pc, #76]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x1174>)
 8001b56:	f000 fc85 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_SET);
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	2120      	movs	r1, #32
 8001b5e:	4812      	ldr	r0, [pc, #72]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 8001b60:	f000 fc80 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_SET);
 8001b64:	2201      	movs	r2, #1
 8001b66:	2140      	movs	r1, #64	; 0x40
 8001b68:	480f      	ldr	r0, [pc, #60]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 8001b6a:	f000 fc7b 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 8001b6e:	2201      	movs	r2, #1
 8001b70:	2180      	movs	r1, #128	; 0x80
 8001b72:	480d      	ldr	r0, [pc, #52]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 8001b74:	f000 fc76 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	2140      	movs	r1, #64	; 0x40
 8001b7c:	4809      	ldr	r0, [pc, #36]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x1174>)
 8001b7e:	f000 fc71 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 8001b82:	2201      	movs	r2, #1
 8001b84:	2180      	movs	r1, #128	; 0x80
 8001b86:	4809      	ldr	r0, [pc, #36]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x117c>)
 8001b88:	f000 fc6c 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 8001b94:	f000 fc66 	bl	8002464 <HAL_GPIO_WritePin>
 8001b98:	e052      	b.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
 8001b9a:	bf00      	nop
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	20000032 	.word	0x20000032
 8001ba4:	40020400 	.word	0x40020400
 8001ba8:	40020000 	.word	0x40020000
 8001bac:	40020800 	.word	0x40020800
		}
		else if(morse_word[0] == 1 && morse_word[1] == 1 && morse_word[2] == 1 && morse_word[3] == 1 && morse_word[4] == 0){		//9
 8001bb0:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x123c>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d138      	bne.n	8001c2a <HAL_TIM_PeriodElapsedCallback+0x11fa>
 8001bb8:	4b2c      	ldr	r3, [pc, #176]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x123c>)
 8001bba:	785b      	ldrb	r3, [r3, #1]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d134      	bne.n	8001c2a <HAL_TIM_PeriodElapsedCallback+0x11fa>
 8001bc0:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x123c>)
 8001bc2:	789b      	ldrb	r3, [r3, #2]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d130      	bne.n	8001c2a <HAL_TIM_PeriodElapsedCallback+0x11fa>
 8001bc8:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x123c>)
 8001bca:	78db      	ldrb	r3, [r3, #3]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d12c      	bne.n	8001c2a <HAL_TIM_PeriodElapsedCallback+0x11fa>
 8001bd0:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x123c>)
 8001bd2:	791b      	ldrb	r3, [r3, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d128      	bne.n	8001c2a <HAL_TIM_PeriodElapsedCallback+0x11fa>
			display_flag = 1;
 8001bd8:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x1240>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 8001bde:	2201      	movs	r2, #1
 8001be0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001be4:	4823      	ldr	r0, [pc, #140]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x1244>)
 8001be6:	f000 fc3d 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_SET);
 8001bea:	2201      	movs	r2, #1
 8001bec:	2120      	movs	r1, #32
 8001bee:	4822      	ldr	r0, [pc, #136]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x1248>)
 8001bf0:	f000 fc38 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_SET);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	2140      	movs	r1, #64	; 0x40
 8001bf8:	481f      	ldr	r0, [pc, #124]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x1248>)
 8001bfa:	f000 fc33 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 8001bfe:	2201      	movs	r2, #1
 8001c00:	2180      	movs	r1, #128	; 0x80
 8001c02:	481d      	ldr	r0, [pc, #116]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x1248>)
 8001c04:	f000 fc2e 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_RESET);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2140      	movs	r1, #64	; 0x40
 8001c0c:	4819      	ldr	r0, [pc, #100]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x1244>)
 8001c0e:	f000 fc29 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 8001c12:	2201      	movs	r2, #1
 8001c14:	2180      	movs	r1, #128	; 0x80
 8001c16:	4819      	ldr	r0, [pc, #100]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x124c>)
 8001c18:	f000 fc24 	bl	8002464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c22:	4815      	ldr	r0, [pc, #84]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x1248>)
 8001c24:	f000 fc1e 	bl	8002464 <HAL_GPIO_WritePin>
 8001c28:	e00a      	b.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
		}
		else if(morse_word[0] == 0 || morse_word[0] == 1)
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x123c>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_TIM_PeriodElapsedCallback+0x120a>
 8001c32:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x123c>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d102      	bne.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x1210>
			error_flag = 1;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1250>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	701a      	strb	r2, [r3, #0]

		morse_word[0] = 99; morse_word[1] = 99; morse_word[2] = 99; morse_word[3] = 99; morse_word[4] = 99;
 8001c40:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x123c>)
 8001c42:	2263      	movs	r2, #99	; 0x63
 8001c44:	701a      	strb	r2, [r3, #0]
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x123c>)
 8001c48:	2263      	movs	r2, #99	; 0x63
 8001c4a:	705a      	strb	r2, [r3, #1]
 8001c4c:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x123c>)
 8001c4e:	2263      	movs	r2, #99	; 0x63
 8001c50:	709a      	strb	r2, [r3, #2]
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x123c>)
 8001c54:	2263      	movs	r2, #99	; 0x63
 8001c56:	70da      	strb	r2, [r3, #3]
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x123c>)
 8001c5a:	2263      	movs	r2, #99	; 0x63
 8001c5c:	711a      	strb	r2, [r3, #4]
		signal_counter = 0;
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1254>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
	}
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000032 	.word	0x20000032
 8001c74:	40020400 	.word	0x40020400
 8001c78:	40020000 	.word	0x40020000
 8001c7c:	40020800 	.word	0x40020800
 8001c80:	20000031 	.word	0x20000031
 8001c84:	20000030 	.word	0x20000030

08001c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <SystemInit+0x28>)
 8001c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c92:	4a07      	ldr	r2, [pc, #28]	; (8001cb0 <SystemInit+0x28>)
 8001c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <SystemInit+0x28>)
 8001c9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ca2:	609a      	str	r2, [r3, #8]
#endif
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cba:	463b      	mov	r3, r7
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <MX_TIM6_Init+0x64>)
 8001cc4:	4a15      	ldr	r2, [pc, #84]	; (8001d1c <MX_TIM6_Init+0x68>)
 8001cc6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 19999;
 8001cc8:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <MX_TIM6_Init+0x64>)
 8001cca:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001cce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <MX_TIM6_Init+0x64>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8399;
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <MX_TIM6_Init+0x64>)
 8001cd8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001cdc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <MX_TIM6_Init+0x64>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ce4:	480c      	ldr	r0, [pc, #48]	; (8001d18 <MX_TIM6_Init+0x64>)
 8001ce6:	f001 f8b7 	bl	8002e58 <HAL_TIM_Base_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001cf0:	f7fe fe36 	bl	8000960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001cfc:	463b      	mov	r3, r7
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4805      	ldr	r0, [pc, #20]	; (8001d18 <MX_TIM6_Init+0x64>)
 8001d02:	f001 faf3 	bl	80032ec <HAL_TIMEx_MasterConfigSynchronization>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001d0c:	f7fe fe28 	bl	8000960 <Error_Handler>
  }

}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000034 	.word	0x20000034
 8001d1c:	40001000 	.word	0x40001000

08001d20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a0e      	ldr	r2, [pc, #56]	; (8001d68 <HAL_TIM_Base_MspInit+0x48>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d115      	bne.n	8001d5e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <HAL_TIM_Base_MspInit+0x4c>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a0c      	ldr	r2, [pc, #48]	; (8001d6c <HAL_TIM_Base_MspInit+0x4c>)
 8001d3c:	f043 0310 	orr.w	r3, r3, #16
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <HAL_TIM_Base_MspInit+0x4c>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2100      	movs	r1, #0
 8001d52:	2036      	movs	r0, #54	; 0x36
 8001d54:	f000 f9a5 	bl	80020a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d58:	2036      	movs	r0, #54	; 0x36
 8001d5a:	f000 f9be 	bl	80020da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40001000 	.word	0x40001000
 8001d6c:	40023800 	.word	0x40023800

08001d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001da8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d76:	e003      	b.n	8001d80 <LoopCopyDataInit>

08001d78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d7e:	3104      	adds	r1, #4

08001d80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d80:	480b      	ldr	r0, [pc, #44]	; (8001db0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d88:	d3f6      	bcc.n	8001d78 <CopyDataInit>
  ldr  r2, =_sbss
 8001d8a:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d8c:	e002      	b.n	8001d94 <LoopFillZerobss>

08001d8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d90:	f842 3b04 	str.w	r3, [r2], #4

08001d94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d94:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d98:	d3f9      	bcc.n	8001d8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d9a:	f7ff ff75 	bl	8001c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d9e:	f001 fb35 	bl	800340c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001da2:	f7fe fd43 	bl	800082c <main>
  bx  lr    
 8001da6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001da8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001dac:	0800349c 	.word	0x0800349c
  ldr  r0, =_sdata
 8001db0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001db4:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8001db8:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8001dbc:	20000078 	.word	0x20000078

08001dc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc0:	e7fe      	b.n	8001dc0 <ADC_IRQHandler>
	...

08001dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <HAL_Init+0x40>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0d      	ldr	r2, [pc, #52]	; (8001e04 <HAL_Init+0x40>)
 8001dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_Init+0x40>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <HAL_Init+0x40>)
 8001dda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a07      	ldr	r2, [pc, #28]	; (8001e04 <HAL_Init+0x40>)
 8001de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dec:	2003      	movs	r0, #3
 8001dee:	f000 f94d 	bl	800208c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001df2:	2000      	movs	r0, #0
 8001df4:	f000 f808 	bl	8001e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df8:	f7fe fdba 	bl	8000970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023c00 	.word	0x40023c00

08001e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_InitTick+0x54>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_InitTick+0x58>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 f965 	bl	80020f6 <HAL_SYSTICK_Config>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00e      	b.n	8001e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b0f      	cmp	r3, #15
 8001e3a:	d80a      	bhi.n	8001e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	f000 f92d 	bl	80020a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e48:	4a06      	ldr	r2, [pc, #24]	; (8001e64 <HAL_InitTick+0x5c>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e000      	b.n	8001e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000008 	.word	0x20000008
 8001e60:	20000010 	.word	0x20000010
 8001e64:	2000000c 	.word	0x2000000c

08001e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_IncTick+0x20>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_IncTick+0x24>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4413      	add	r3, r2
 8001e78:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <HAL_IncTick+0x24>)
 8001e7a:	6013      	str	r3, [r2, #0]
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	20000010 	.word	0x20000010
 8001e8c:	20000074 	.word	0x20000074

08001e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return uwTick;
 8001e94:	4b03      	ldr	r3, [pc, #12]	; (8001ea4 <HAL_GetTick+0x14>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	20000074 	.word	0x20000074

08001ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb0:	f7ff ffee 	bl	8001e90 <HAL_GetTick>
 8001eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec0:	d005      	beq.n	8001ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <HAL_Delay+0x40>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4413      	add	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ece:	bf00      	nop
 8001ed0:	f7ff ffde 	bl	8001e90 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d8f7      	bhi.n	8001ed0 <HAL_Delay+0x28>
  {
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000010 	.word	0x20000010

08001eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1e:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	60d3      	str	r3, [r2, #12]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <__NVIC_GetPriorityGrouping+0x18>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	f003 0307 	and.w	r3, r3, #7
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	db0b      	blt.n	8001f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	f003 021f 	and.w	r2, r3, #31
 8001f68:	4907      	ldr	r1, [pc, #28]	; (8001f88 <__NVIC_EnableIRQ+0x38>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	2001      	movs	r0, #1
 8001f72:	fa00 f202 	lsl.w	r2, r0, r2
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000e100 	.word	0xe000e100

08001f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	db0a      	blt.n	8001fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	490c      	ldr	r1, [pc, #48]	; (8001fd8 <__NVIC_SetPriority+0x4c>)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	0112      	lsls	r2, r2, #4
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	440b      	add	r3, r1
 8001fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb4:	e00a      	b.n	8001fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4908      	ldr	r1, [pc, #32]	; (8001fdc <__NVIC_SetPriority+0x50>)
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	3b04      	subs	r3, #4
 8001fc4:	0112      	lsls	r2, r2, #4
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	440b      	add	r3, r1
 8001fca:	761a      	strb	r2, [r3, #24]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000e100 	.word	0xe000e100
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f1c3 0307 	rsb	r3, r3, #7
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	bf28      	it	cs
 8001ffe:	2304      	movcs	r3, #4
 8002000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3304      	adds	r3, #4
 8002006:	2b06      	cmp	r3, #6
 8002008:	d902      	bls.n	8002010 <NVIC_EncodePriority+0x30>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3b03      	subs	r3, #3
 800200e:	e000      	b.n	8002012 <NVIC_EncodePriority+0x32>
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	f04f 32ff 	mov.w	r2, #4294967295
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	401a      	ands	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002028:	f04f 31ff 	mov.w	r1, #4294967295
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	43d9      	mvns	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	4313      	orrs	r3, r2
         );
}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	; 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3b01      	subs	r3, #1
 8002054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002058:	d301      	bcc.n	800205e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800205a:	2301      	movs	r3, #1
 800205c:	e00f      	b.n	800207e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800205e:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <SysTick_Config+0x40>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002066:	210f      	movs	r1, #15
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	f7ff ff8e 	bl	8001f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <SysTick_Config+0x40>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002076:	4b04      	ldr	r3, [pc, #16]	; (8002088 <SysTick_Config+0x40>)
 8002078:	2207      	movs	r2, #7
 800207a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	e000e010 	.word	0xe000e010

0800208c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff ff29 	bl	8001eec <__NVIC_SetPriorityGrouping>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
 80020ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b4:	f7ff ff3e 	bl	8001f34 <__NVIC_GetPriorityGrouping>
 80020b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	6978      	ldr	r0, [r7, #20]
 80020c0:	f7ff ff8e 	bl	8001fe0 <NVIC_EncodePriority>
 80020c4:	4602      	mov	r2, r0
 80020c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff5d 	bl	8001f8c <__NVIC_SetPriority>
}
 80020d2:	bf00      	nop
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	4603      	mov	r3, r0
 80020e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff31 	bl	8001f50 <__NVIC_EnableIRQ>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff ffa2 	bl	8002048 <SysTick_Config>
 8002104:	4603      	mov	r3, r0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002110:	b480      	push	{r7}
 8002112:	b089      	sub	sp, #36	; 0x24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	e165      	b.n	80023f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800212c:	2201      	movs	r2, #1
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	429a      	cmp	r2, r3
 8002146:	f040 8154 	bne.w	80023f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d00b      	beq.n	800216a <HAL_GPIO_Init+0x5a>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d007      	beq.n	800216a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800215e:	2b11      	cmp	r3, #17
 8002160:	d003      	beq.n	800216a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b12      	cmp	r3, #18
 8002168:	d130      	bne.n	80021cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	2203      	movs	r2, #3
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021a0:	2201      	movs	r2, #1
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	091b      	lsrs	r3, r3, #4
 80021b6:	f003 0201 	and.w	r2, r3, #1
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	2203      	movs	r2, #3
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d003      	beq.n	800220c <HAL_GPIO_Init+0xfc>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b12      	cmp	r3, #18
 800220a:	d123      	bne.n	8002254 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	08da      	lsrs	r2, r3, #3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3208      	adds	r2, #8
 8002214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	220f      	movs	r2, #15
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	08da      	lsrs	r2, r3, #3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3208      	adds	r2, #8
 800224e:	69b9      	ldr	r1, [r7, #24]
 8002250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	2203      	movs	r2, #3
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0203 	and.w	r2, r3, #3
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 80ae 	beq.w	80023f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	4b5c      	ldr	r3, [pc, #368]	; (800240c <HAL_GPIO_Init+0x2fc>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	4a5b      	ldr	r2, [pc, #364]	; (800240c <HAL_GPIO_Init+0x2fc>)
 80022a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022a4:	6453      	str	r3, [r2, #68]	; 0x44
 80022a6:	4b59      	ldr	r3, [pc, #356]	; (800240c <HAL_GPIO_Init+0x2fc>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022b2:	4a57      	ldr	r2, [pc, #348]	; (8002410 <HAL_GPIO_Init+0x300>)
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	089b      	lsrs	r3, r3, #2
 80022b8:	3302      	adds	r3, #2
 80022ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	220f      	movs	r2, #15
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a4e      	ldr	r2, [pc, #312]	; (8002414 <HAL_GPIO_Init+0x304>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d025      	beq.n	800232a <HAL_GPIO_Init+0x21a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a4d      	ldr	r2, [pc, #308]	; (8002418 <HAL_GPIO_Init+0x308>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d01f      	beq.n	8002326 <HAL_GPIO_Init+0x216>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4c      	ldr	r2, [pc, #304]	; (800241c <HAL_GPIO_Init+0x30c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d019      	beq.n	8002322 <HAL_GPIO_Init+0x212>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4b      	ldr	r2, [pc, #300]	; (8002420 <HAL_GPIO_Init+0x310>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d013      	beq.n	800231e <HAL_GPIO_Init+0x20e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a4a      	ldr	r2, [pc, #296]	; (8002424 <HAL_GPIO_Init+0x314>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00d      	beq.n	800231a <HAL_GPIO_Init+0x20a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a49      	ldr	r2, [pc, #292]	; (8002428 <HAL_GPIO_Init+0x318>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d007      	beq.n	8002316 <HAL_GPIO_Init+0x206>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a48      	ldr	r2, [pc, #288]	; (800242c <HAL_GPIO_Init+0x31c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d101      	bne.n	8002312 <HAL_GPIO_Init+0x202>
 800230e:	2306      	movs	r3, #6
 8002310:	e00c      	b.n	800232c <HAL_GPIO_Init+0x21c>
 8002312:	2307      	movs	r3, #7
 8002314:	e00a      	b.n	800232c <HAL_GPIO_Init+0x21c>
 8002316:	2305      	movs	r3, #5
 8002318:	e008      	b.n	800232c <HAL_GPIO_Init+0x21c>
 800231a:	2304      	movs	r3, #4
 800231c:	e006      	b.n	800232c <HAL_GPIO_Init+0x21c>
 800231e:	2303      	movs	r3, #3
 8002320:	e004      	b.n	800232c <HAL_GPIO_Init+0x21c>
 8002322:	2302      	movs	r3, #2
 8002324:	e002      	b.n	800232c <HAL_GPIO_Init+0x21c>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <HAL_GPIO_Init+0x21c>
 800232a:	2300      	movs	r3, #0
 800232c:	69fa      	ldr	r2, [r7, #28]
 800232e:	f002 0203 	and.w	r2, r2, #3
 8002332:	0092      	lsls	r2, r2, #2
 8002334:	4093      	lsls	r3, r2
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800233c:	4934      	ldr	r1, [pc, #208]	; (8002410 <HAL_GPIO_Init+0x300>)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	089b      	lsrs	r3, r3, #2
 8002342:	3302      	adds	r3, #2
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800234a:	4b39      	ldr	r3, [pc, #228]	; (8002430 <HAL_GPIO_Init+0x320>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800236e:	4a30      	ldr	r2, [pc, #192]	; (8002430 <HAL_GPIO_Init+0x320>)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002374:	4b2e      	ldr	r3, [pc, #184]	; (8002430 <HAL_GPIO_Init+0x320>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002398:	4a25      	ldr	r2, [pc, #148]	; (8002430 <HAL_GPIO_Init+0x320>)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800239e:	4b24      	ldr	r3, [pc, #144]	; (8002430 <HAL_GPIO_Init+0x320>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023c2:	4a1b      	ldr	r2, [pc, #108]	; (8002430 <HAL_GPIO_Init+0x320>)
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023c8:	4b19      	ldr	r3, [pc, #100]	; (8002430 <HAL_GPIO_Init+0x320>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023ec:	4a10      	ldr	r2, [pc, #64]	; (8002430 <HAL_GPIO_Init+0x320>)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3301      	adds	r3, #1
 80023f6:	61fb      	str	r3, [r7, #28]
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	2b0f      	cmp	r3, #15
 80023fc:	f67f ae96 	bls.w	800212c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002400:	bf00      	nop
 8002402:	3724      	adds	r7, #36	; 0x24
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	40023800 	.word	0x40023800
 8002410:	40013800 	.word	0x40013800
 8002414:	40020000 	.word	0x40020000
 8002418:	40020400 	.word	0x40020400
 800241c:	40020800 	.word	0x40020800
 8002420:	40020c00 	.word	0x40020c00
 8002424:	40021000 	.word	0x40021000
 8002428:	40021400 	.word	0x40021400
 800242c:	40021800 	.word	0x40021800
 8002430:	40013c00 	.word	0x40013c00

08002434 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	887b      	ldrh	r3, [r7, #2]
 8002446:	4013      	ands	r3, r2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d002      	beq.n	8002452 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
 8002450:	e001      	b.n	8002456 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002452:	2300      	movs	r3, #0
 8002454:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002456:	7bfb      	ldrb	r3, [r7, #15]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	807b      	strh	r3, [r7, #2]
 8002470:	4613      	mov	r3, r2
 8002472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002474:	787b      	ldrb	r3, [r7, #1]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800247a:	887a      	ldrh	r2, [r7, #2]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002480:	e003      	b.n	800248a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002482:	887b      	ldrh	r3, [r7, #2]
 8002484:	041a      	lsls	r2, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	619a      	str	r2, [r3, #24]
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0cc      	b.n	8002646 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024ac:	4b68      	ldr	r3, [pc, #416]	; (8002650 <HAL_RCC_ClockConfig+0x1b8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d90c      	bls.n	80024d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ba:	4b65      	ldr	r3, [pc, #404]	; (8002650 <HAL_RCC_ClockConfig+0x1b8>)
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c2:	4b63      	ldr	r3, [pc, #396]	; (8002650 <HAL_RCC_ClockConfig+0x1b8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0b8      	b.n	8002646 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d020      	beq.n	8002522 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024ec:	4b59      	ldr	r3, [pc, #356]	; (8002654 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	4a58      	ldr	r2, [pc, #352]	; (8002654 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002504:	4b53      	ldr	r3, [pc, #332]	; (8002654 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	4a52      	ldr	r2, [pc, #328]	; (8002654 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800250e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002510:	4b50      	ldr	r3, [pc, #320]	; (8002654 <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	494d      	ldr	r1, [pc, #308]	; (8002654 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	4313      	orrs	r3, r2
 8002520:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d044      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d107      	bne.n	8002546 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002536:	4b47      	ldr	r3, [pc, #284]	; (8002654 <HAL_RCC_ClockConfig+0x1bc>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d119      	bne.n	8002576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e07f      	b.n	8002646 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d003      	beq.n	8002556 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002552:	2b03      	cmp	r3, #3
 8002554:	d107      	bne.n	8002566 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002556:	4b3f      	ldr	r3, [pc, #252]	; (8002654 <HAL_RCC_ClockConfig+0x1bc>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d109      	bne.n	8002576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e06f      	b.n	8002646 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002566:	4b3b      	ldr	r3, [pc, #236]	; (8002654 <HAL_RCC_ClockConfig+0x1bc>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e067      	b.n	8002646 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002576:	4b37      	ldr	r3, [pc, #220]	; (8002654 <HAL_RCC_ClockConfig+0x1bc>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f023 0203 	bic.w	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	4934      	ldr	r1, [pc, #208]	; (8002654 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	4313      	orrs	r3, r2
 8002586:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002588:	f7ff fc82 	bl	8001e90 <HAL_GetTick>
 800258c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258e:	e00a      	b.n	80025a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002590:	f7ff fc7e 	bl	8001e90 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f241 3288 	movw	r2, #5000	; 0x1388
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e04f      	b.n	8002646 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a6:	4b2b      	ldr	r3, [pc, #172]	; (8002654 <HAL_RCC_ClockConfig+0x1bc>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 020c 	and.w	r2, r3, #12
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d1eb      	bne.n	8002590 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025b8:	4b25      	ldr	r3, [pc, #148]	; (8002650 <HAL_RCC_ClockConfig+0x1b8>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d20c      	bcs.n	80025e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b22      	ldr	r3, [pc, #136]	; (8002650 <HAL_RCC_ClockConfig+0x1b8>)
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ce:	4b20      	ldr	r3, [pc, #128]	; (8002650 <HAL_RCC_ClockConfig+0x1b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d001      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e032      	b.n	8002646 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d008      	beq.n	80025fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025ec:	4b19      	ldr	r3, [pc, #100]	; (8002654 <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4916      	ldr	r1, [pc, #88]	; (8002654 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d009      	beq.n	800261e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800260a:	4b12      	ldr	r3, [pc, #72]	; (8002654 <HAL_RCC_ClockConfig+0x1bc>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	490e      	ldr	r1, [pc, #56]	; (8002654 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	4313      	orrs	r3, r2
 800261c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800261e:	f000 f821 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 8002622:	4601      	mov	r1, r0
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	091b      	lsrs	r3, r3, #4
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <HAL_RCC_ClockConfig+0x1c0>)
 8002630:	5cd3      	ldrb	r3, [r2, r3]
 8002632:	fa21 f303 	lsr.w	r3, r1, r3
 8002636:	4a09      	ldr	r2, [pc, #36]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800263a:	4b09      	ldr	r3, [pc, #36]	; (8002660 <HAL_RCC_ClockConfig+0x1c8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fbe2 	bl	8001e08 <HAL_InitTick>

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40023c00 	.word	0x40023c00
 8002654:	40023800 	.word	0x40023800
 8002658:	0800347c 	.word	0x0800347c
 800265c:	20000008 	.word	0x20000008
 8002660:	2000000c 	.word	0x2000000c

08002664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800267e:	4bc6      	ldr	r3, [pc, #792]	; (8002998 <HAL_RCC_GetSysClockFreq+0x334>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	2b0c      	cmp	r3, #12
 8002688:	f200 817e 	bhi.w	8002988 <HAL_RCC_GetSysClockFreq+0x324>
 800268c:	a201      	add	r2, pc, #4	; (adr r2, 8002694 <HAL_RCC_GetSysClockFreq+0x30>)
 800268e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002692:	bf00      	nop
 8002694:	080026c9 	.word	0x080026c9
 8002698:	08002989 	.word	0x08002989
 800269c:	08002989 	.word	0x08002989
 80026a0:	08002989 	.word	0x08002989
 80026a4:	080026cf 	.word	0x080026cf
 80026a8:	08002989 	.word	0x08002989
 80026ac:	08002989 	.word	0x08002989
 80026b0:	08002989 	.word	0x08002989
 80026b4:	080026d5 	.word	0x080026d5
 80026b8:	08002989 	.word	0x08002989
 80026bc:	08002989 	.word	0x08002989
 80026c0:	08002989 	.word	0x08002989
 80026c4:	08002831 	.word	0x08002831
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026c8:	4bb4      	ldr	r3, [pc, #720]	; (800299c <HAL_RCC_GetSysClockFreq+0x338>)
 80026ca:	613b      	str	r3, [r7, #16]
       break;
 80026cc:	e15f      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ce:	4bb4      	ldr	r3, [pc, #720]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x33c>)
 80026d0:	613b      	str	r3, [r7, #16]
      break;
 80026d2:	e15c      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026d4:	4bb0      	ldr	r3, [pc, #704]	; (8002998 <HAL_RCC_GetSysClockFreq+0x334>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026dc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026de:	4bae      	ldr	r3, [pc, #696]	; (8002998 <HAL_RCC_GetSysClockFreq+0x334>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d04a      	beq.n	8002780 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ea:	4bab      	ldr	r3, [pc, #684]	; (8002998 <HAL_RCC_GetSysClockFreq+0x334>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	099b      	lsrs	r3, r3, #6
 80026f0:	f04f 0400 	mov.w	r4, #0
 80026f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	ea03 0501 	and.w	r5, r3, r1
 8002700:	ea04 0602 	and.w	r6, r4, r2
 8002704:	4629      	mov	r1, r5
 8002706:	4632      	mov	r2, r6
 8002708:	f04f 0300 	mov.w	r3, #0
 800270c:	f04f 0400 	mov.w	r4, #0
 8002710:	0154      	lsls	r4, r2, #5
 8002712:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002716:	014b      	lsls	r3, r1, #5
 8002718:	4619      	mov	r1, r3
 800271a:	4622      	mov	r2, r4
 800271c:	1b49      	subs	r1, r1, r5
 800271e:	eb62 0206 	sbc.w	r2, r2, r6
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	f04f 0400 	mov.w	r4, #0
 800272a:	0194      	lsls	r4, r2, #6
 800272c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002730:	018b      	lsls	r3, r1, #6
 8002732:	1a5b      	subs	r3, r3, r1
 8002734:	eb64 0402 	sbc.w	r4, r4, r2
 8002738:	f04f 0100 	mov.w	r1, #0
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	00e2      	lsls	r2, r4, #3
 8002742:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002746:	00d9      	lsls	r1, r3, #3
 8002748:	460b      	mov	r3, r1
 800274a:	4614      	mov	r4, r2
 800274c:	195b      	adds	r3, r3, r5
 800274e:	eb44 0406 	adc.w	r4, r4, r6
 8002752:	f04f 0100 	mov.w	r1, #0
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	0262      	lsls	r2, r4, #9
 800275c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002760:	0259      	lsls	r1, r3, #9
 8002762:	460b      	mov	r3, r1
 8002764:	4614      	mov	r4, r2
 8002766:	4618      	mov	r0, r3
 8002768:	4621      	mov	r1, r4
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f04f 0400 	mov.w	r4, #0
 8002770:	461a      	mov	r2, r3
 8002772:	4623      	mov	r3, r4
 8002774:	f7fd fd46 	bl	8000204 <__aeabi_uldivmod>
 8002778:	4603      	mov	r3, r0
 800277a:	460c      	mov	r4, r1
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	e049      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002780:	4b85      	ldr	r3, [pc, #532]	; (8002998 <HAL_RCC_GetSysClockFreq+0x334>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	f04f 0400 	mov.w	r4, #0
 800278a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	ea03 0501 	and.w	r5, r3, r1
 8002796:	ea04 0602 	and.w	r6, r4, r2
 800279a:	4629      	mov	r1, r5
 800279c:	4632      	mov	r2, r6
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	f04f 0400 	mov.w	r4, #0
 80027a6:	0154      	lsls	r4, r2, #5
 80027a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80027ac:	014b      	lsls	r3, r1, #5
 80027ae:	4619      	mov	r1, r3
 80027b0:	4622      	mov	r2, r4
 80027b2:	1b49      	subs	r1, r1, r5
 80027b4:	eb62 0206 	sbc.w	r2, r2, r6
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	f04f 0400 	mov.w	r4, #0
 80027c0:	0194      	lsls	r4, r2, #6
 80027c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027c6:	018b      	lsls	r3, r1, #6
 80027c8:	1a5b      	subs	r3, r3, r1
 80027ca:	eb64 0402 	sbc.w	r4, r4, r2
 80027ce:	f04f 0100 	mov.w	r1, #0
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	00e2      	lsls	r2, r4, #3
 80027d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027dc:	00d9      	lsls	r1, r3, #3
 80027de:	460b      	mov	r3, r1
 80027e0:	4614      	mov	r4, r2
 80027e2:	195b      	adds	r3, r3, r5
 80027e4:	eb44 0406 	adc.w	r4, r4, r6
 80027e8:	f04f 0100 	mov.w	r1, #0
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	02a2      	lsls	r2, r4, #10
 80027f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80027f6:	0299      	lsls	r1, r3, #10
 80027f8:	460b      	mov	r3, r1
 80027fa:	4614      	mov	r4, r2
 80027fc:	4618      	mov	r0, r3
 80027fe:	4621      	mov	r1, r4
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f04f 0400 	mov.w	r4, #0
 8002806:	461a      	mov	r2, r3
 8002808:	4623      	mov	r3, r4
 800280a:	f7fd fcfb 	bl	8000204 <__aeabi_uldivmod>
 800280e:	4603      	mov	r3, r0
 8002810:	460c      	mov	r4, r1
 8002812:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002814:	4b60      	ldr	r3, [pc, #384]	; (8002998 <HAL_RCC_GetSysClockFreq+0x334>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	0c1b      	lsrs	r3, r3, #16
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	3301      	adds	r3, #1
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	fbb2 f3f3 	udiv	r3, r2, r3
 800282c:	613b      	str	r3, [r7, #16]
      break;
 800282e:	e0ae      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002830:	4b59      	ldr	r3, [pc, #356]	; (8002998 <HAL_RCC_GetSysClockFreq+0x334>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002838:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800283a:	4b57      	ldr	r3, [pc, #348]	; (8002998 <HAL_RCC_GetSysClockFreq+0x334>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d04a      	beq.n	80028dc <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002846:	4b54      	ldr	r3, [pc, #336]	; (8002998 <HAL_RCC_GetSysClockFreq+0x334>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	099b      	lsrs	r3, r3, #6
 800284c:	f04f 0400 	mov.w	r4, #0
 8002850:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	ea03 0501 	and.w	r5, r3, r1
 800285c:	ea04 0602 	and.w	r6, r4, r2
 8002860:	4629      	mov	r1, r5
 8002862:	4632      	mov	r2, r6
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	f04f 0400 	mov.w	r4, #0
 800286c:	0154      	lsls	r4, r2, #5
 800286e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002872:	014b      	lsls	r3, r1, #5
 8002874:	4619      	mov	r1, r3
 8002876:	4622      	mov	r2, r4
 8002878:	1b49      	subs	r1, r1, r5
 800287a:	eb62 0206 	sbc.w	r2, r2, r6
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	f04f 0400 	mov.w	r4, #0
 8002886:	0194      	lsls	r4, r2, #6
 8002888:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800288c:	018b      	lsls	r3, r1, #6
 800288e:	1a5b      	subs	r3, r3, r1
 8002890:	eb64 0402 	sbc.w	r4, r4, r2
 8002894:	f04f 0100 	mov.w	r1, #0
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	00e2      	lsls	r2, r4, #3
 800289e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028a2:	00d9      	lsls	r1, r3, #3
 80028a4:	460b      	mov	r3, r1
 80028a6:	4614      	mov	r4, r2
 80028a8:	195b      	adds	r3, r3, r5
 80028aa:	eb44 0406 	adc.w	r4, r4, r6
 80028ae:	f04f 0100 	mov.w	r1, #0
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	0262      	lsls	r2, r4, #9
 80028b8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80028bc:	0259      	lsls	r1, r3, #9
 80028be:	460b      	mov	r3, r1
 80028c0:	4614      	mov	r4, r2
 80028c2:	4618      	mov	r0, r3
 80028c4:	4621      	mov	r1, r4
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f04f 0400 	mov.w	r4, #0
 80028cc:	461a      	mov	r2, r3
 80028ce:	4623      	mov	r3, r4
 80028d0:	f7fd fc98 	bl	8000204 <__aeabi_uldivmod>
 80028d4:	4603      	mov	r3, r0
 80028d6:	460c      	mov	r4, r1
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	e049      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028dc:	4b2e      	ldr	r3, [pc, #184]	; (8002998 <HAL_RCC_GetSysClockFreq+0x334>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	099b      	lsrs	r3, r3, #6
 80028e2:	f04f 0400 	mov.w	r4, #0
 80028e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	ea03 0501 	and.w	r5, r3, r1
 80028f2:	ea04 0602 	and.w	r6, r4, r2
 80028f6:	4629      	mov	r1, r5
 80028f8:	4632      	mov	r2, r6
 80028fa:	f04f 0300 	mov.w	r3, #0
 80028fe:	f04f 0400 	mov.w	r4, #0
 8002902:	0154      	lsls	r4, r2, #5
 8002904:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002908:	014b      	lsls	r3, r1, #5
 800290a:	4619      	mov	r1, r3
 800290c:	4622      	mov	r2, r4
 800290e:	1b49      	subs	r1, r1, r5
 8002910:	eb62 0206 	sbc.w	r2, r2, r6
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	f04f 0400 	mov.w	r4, #0
 800291c:	0194      	lsls	r4, r2, #6
 800291e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002922:	018b      	lsls	r3, r1, #6
 8002924:	1a5b      	subs	r3, r3, r1
 8002926:	eb64 0402 	sbc.w	r4, r4, r2
 800292a:	f04f 0100 	mov.w	r1, #0
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	00e2      	lsls	r2, r4, #3
 8002934:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002938:	00d9      	lsls	r1, r3, #3
 800293a:	460b      	mov	r3, r1
 800293c:	4614      	mov	r4, r2
 800293e:	195b      	adds	r3, r3, r5
 8002940:	eb44 0406 	adc.w	r4, r4, r6
 8002944:	f04f 0100 	mov.w	r1, #0
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	02a2      	lsls	r2, r4, #10
 800294e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002952:	0299      	lsls	r1, r3, #10
 8002954:	460b      	mov	r3, r1
 8002956:	4614      	mov	r4, r2
 8002958:	4618      	mov	r0, r3
 800295a:	4621      	mov	r1, r4
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f04f 0400 	mov.w	r4, #0
 8002962:	461a      	mov	r2, r3
 8002964:	4623      	mov	r3, r4
 8002966:	f7fd fc4d 	bl	8000204 <__aeabi_uldivmod>
 800296a:	4603      	mov	r3, r0
 800296c:	460c      	mov	r4, r1
 800296e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002970:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_RCC_GetSysClockFreq+0x334>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	0f1b      	lsrs	r3, r3, #28
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	fbb2 f3f3 	udiv	r3, r2, r3
 8002984:	613b      	str	r3, [r7, #16]
      break;
 8002986:	e002      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <HAL_RCC_GetSysClockFreq+0x338>)
 800298a:	613b      	str	r3, [r7, #16]
      break;
 800298c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800298e:	693b      	ldr	r3, [r7, #16]
}
 8002990:	4618      	mov	r0, r3
 8002992:	371c      	adds	r7, #28
 8002994:	46bd      	mov	sp, r7
 8002996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002998:	40023800 	.word	0x40023800
 800299c:	00f42400 	.word	0x00f42400
 80029a0:	007a1200 	.word	0x007a1200

080029a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 8083 	beq.w	8002ac4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029be:	4b95      	ldr	r3, [pc, #596]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d019      	beq.n	80029fe <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029ca:	4b92      	ldr	r3, [pc, #584]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d106      	bne.n	80029e4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029d6:	4b8f      	ldr	r3, [pc, #572]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029e2:	d00c      	beq.n	80029fe <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029e4:	4b8b      	ldr	r3, [pc, #556]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029ec:	2b0c      	cmp	r3, #12
 80029ee:	d112      	bne.n	8002a16 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f0:	4b88      	ldr	r3, [pc, #544]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029fc:	d10b      	bne.n	8002a16 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fe:	4b85      	ldr	r3, [pc, #532]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d05b      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x11e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d157      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e216      	b.n	8002e44 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a1e:	d106      	bne.n	8002a2e <HAL_RCC_OscConfig+0x8a>
 8002a20:	4b7c      	ldr	r3, [pc, #496]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a7b      	ldr	r2, [pc, #492]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a2a:	6013      	str	r3, [r2, #0]
 8002a2c:	e01d      	b.n	8002a6a <HAL_RCC_OscConfig+0xc6>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a36:	d10c      	bne.n	8002a52 <HAL_RCC_OscConfig+0xae>
 8002a38:	4b76      	ldr	r3, [pc, #472]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a75      	ldr	r2, [pc, #468]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	4b73      	ldr	r3, [pc, #460]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a72      	ldr	r2, [pc, #456]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	e00b      	b.n	8002a6a <HAL_RCC_OscConfig+0xc6>
 8002a52:	4b70      	ldr	r3, [pc, #448]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a6f      	ldr	r2, [pc, #444]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	4b6d      	ldr	r3, [pc, #436]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a6c      	ldr	r2, [pc, #432]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a68:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d013      	beq.n	8002a9a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a72:	f7ff fa0d 	bl	8001e90 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a7a:	f7ff fa09 	bl	8001e90 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b64      	cmp	r3, #100	; 0x64
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e1db      	b.n	8002e44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8c:	4b61      	ldr	r3, [pc, #388]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f0      	beq.n	8002a7a <HAL_RCC_OscConfig+0xd6>
 8002a98:	e014      	b.n	8002ac4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9a:	f7ff f9f9 	bl	8001e90 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa2:	f7ff f9f5 	bl	8001e90 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b64      	cmp	r3, #100	; 0x64
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e1c7      	b.n	8002e44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab4:	4b57      	ldr	r3, [pc, #348]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1f0      	bne.n	8002aa2 <HAL_RCC_OscConfig+0xfe>
 8002ac0:	e000      	b.n	8002ac4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d06f      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ad0:	4b50      	ldr	r3, [pc, #320]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d017      	beq.n	8002b0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002adc:	4b4d      	ldr	r3, [pc, #308]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d105      	bne.n	8002af4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ae8:	4b4a      	ldr	r3, [pc, #296]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00b      	beq.n	8002b0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002af4:	4b47      	ldr	r3, [pc, #284]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002afc:	2b0c      	cmp	r3, #12
 8002afe:	d11c      	bne.n	8002b3a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b00:	4b44      	ldr	r3, [pc, #272]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d116      	bne.n	8002b3a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0c:	4b41      	ldr	r3, [pc, #260]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_RCC_OscConfig+0x180>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e18f      	b.n	8002e44 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b24:	4b3b      	ldr	r3, [pc, #236]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4938      	ldr	r1, [pc, #224]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b38:	e03a      	b.n	8002bb0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d020      	beq.n	8002b84 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b42:	4b35      	ldr	r3, [pc, #212]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7ff f9a2 	bl	8001e90 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b50:	f7ff f99e 	bl	8001e90 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e170      	b.n	8002e44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b62:	4b2c      	ldr	r3, [pc, #176]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6e:	4b29      	ldr	r3, [pc, #164]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4925      	ldr	r1, [pc, #148]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]
 8002b82:	e015      	b.n	8002bb0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b84:	4b24      	ldr	r3, [pc, #144]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8a:	f7ff f981 	bl	8001e90 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b92:	f7ff f97d 	bl	8001e90 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e14f      	b.n	8002e44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1f0      	bne.n	8002b92 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d037      	beq.n	8002c2c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d016      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc4:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <HAL_RCC_OscConfig+0x278>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bca:	f7ff f961 	bl	8001e90 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd2:	f7ff f95d 	bl	8001e90 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e12f      	b.n	8002e44 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0f0      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x22e>
 8002bf0:	e01c      	b.n	8002c2c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf2:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <HAL_RCC_OscConfig+0x278>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf8:	f7ff f94a 	bl	8001e90 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bfe:	e00f      	b.n	8002c20 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c00:	f7ff f946 	bl	8001e90 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d908      	bls.n	8002c20 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e118      	b.n	8002e44 <HAL_RCC_OscConfig+0x4a0>
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800
 8002c18:	42470000 	.word	0x42470000
 8002c1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c20:	4b8a      	ldr	r3, [pc, #552]	; (8002e4c <HAL_RCC_OscConfig+0x4a8>)
 8002c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1e9      	bne.n	8002c00 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 8097 	beq.w	8002d68 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3e:	4b83      	ldr	r3, [pc, #524]	; (8002e4c <HAL_RCC_OscConfig+0x4a8>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10f      	bne.n	8002c6a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	4b7f      	ldr	r3, [pc, #508]	; (8002e4c <HAL_RCC_OscConfig+0x4a8>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	4a7e      	ldr	r2, [pc, #504]	; (8002e4c <HAL_RCC_OscConfig+0x4a8>)
 8002c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c58:	6413      	str	r3, [r2, #64]	; 0x40
 8002c5a:	4b7c      	ldr	r3, [pc, #496]	; (8002e4c <HAL_RCC_OscConfig+0x4a8>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c66:	2301      	movs	r3, #1
 8002c68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6a:	4b79      	ldr	r3, [pc, #484]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d118      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c76:	4b76      	ldr	r3, [pc, #472]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a75      	ldr	r2, [pc, #468]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c82:	f7ff f905 	bl	8001e90 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c8a:	f7ff f901 	bl	8001e90 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e0d3      	b.n	8002e44 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9c:	4b6c      	ldr	r3, [pc, #432]	; (8002e50 <HAL_RCC_OscConfig+0x4ac>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d106      	bne.n	8002cbe <HAL_RCC_OscConfig+0x31a>
 8002cb0:	4b66      	ldr	r3, [pc, #408]	; (8002e4c <HAL_RCC_OscConfig+0x4a8>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	4a65      	ldr	r2, [pc, #404]	; (8002e4c <HAL_RCC_OscConfig+0x4a8>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	6713      	str	r3, [r2, #112]	; 0x70
 8002cbc:	e01c      	b.n	8002cf8 <HAL_RCC_OscConfig+0x354>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b05      	cmp	r3, #5
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x33c>
 8002cc6:	4b61      	ldr	r3, [pc, #388]	; (8002e4c <HAL_RCC_OscConfig+0x4a8>)
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cca:	4a60      	ldr	r2, [pc, #384]	; (8002e4c <HAL_RCC_OscConfig+0x4a8>)
 8002ccc:	f043 0304 	orr.w	r3, r3, #4
 8002cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd2:	4b5e      	ldr	r3, [pc, #376]	; (8002e4c <HAL_RCC_OscConfig+0x4a8>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	4a5d      	ldr	r2, [pc, #372]	; (8002e4c <HAL_RCC_OscConfig+0x4a8>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cde:	e00b      	b.n	8002cf8 <HAL_RCC_OscConfig+0x354>
 8002ce0:	4b5a      	ldr	r3, [pc, #360]	; (8002e4c <HAL_RCC_OscConfig+0x4a8>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	4a59      	ldr	r2, [pc, #356]	; (8002e4c <HAL_RCC_OscConfig+0x4a8>)
 8002ce6:	f023 0301 	bic.w	r3, r3, #1
 8002cea:	6713      	str	r3, [r2, #112]	; 0x70
 8002cec:	4b57      	ldr	r3, [pc, #348]	; (8002e4c <HAL_RCC_OscConfig+0x4a8>)
 8002cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf0:	4a56      	ldr	r2, [pc, #344]	; (8002e4c <HAL_RCC_OscConfig+0x4a8>)
 8002cf2:	f023 0304 	bic.w	r3, r3, #4
 8002cf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d015      	beq.n	8002d2c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d00:	f7ff f8c6 	bl	8001e90 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d08:	f7ff f8c2 	bl	8001e90 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e092      	b.n	8002e44 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1e:	4b4b      	ldr	r3, [pc, #300]	; (8002e4c <HAL_RCC_OscConfig+0x4a8>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0ee      	beq.n	8002d08 <HAL_RCC_OscConfig+0x364>
 8002d2a:	e014      	b.n	8002d56 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2c:	f7ff f8b0 	bl	8001e90 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d32:	e00a      	b.n	8002d4a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d34:	f7ff f8ac 	bl	8001e90 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e07c      	b.n	8002e44 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d4a:	4b40      	ldr	r3, [pc, #256]	; (8002e4c <HAL_RCC_OscConfig+0x4a8>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1ee      	bne.n	8002d34 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d56:	7dfb      	ldrb	r3, [r7, #23]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d105      	bne.n	8002d68 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d5c:	4b3b      	ldr	r3, [pc, #236]	; (8002e4c <HAL_RCC_OscConfig+0x4a8>)
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	4a3a      	ldr	r2, [pc, #232]	; (8002e4c <HAL_RCC_OscConfig+0x4a8>)
 8002d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d068      	beq.n	8002e42 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d70:	4b36      	ldr	r3, [pc, #216]	; (8002e4c <HAL_RCC_OscConfig+0x4a8>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 030c 	and.w	r3, r3, #12
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d060      	beq.n	8002e3e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d145      	bne.n	8002e10 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d84:	4b33      	ldr	r3, [pc, #204]	; (8002e54 <HAL_RCC_OscConfig+0x4b0>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8a:	f7ff f881 	bl	8001e90 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d92:	f7ff f87d 	bl	8001e90 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e04f      	b.n	8002e44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da4:	4b29      	ldr	r3, [pc, #164]	; (8002e4c <HAL_RCC_OscConfig+0x4a8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f0      	bne.n	8002d92 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69da      	ldr	r2, [r3, #28]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	019b      	lsls	r3, r3, #6
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc6:	085b      	lsrs	r3, r3, #1
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	041b      	lsls	r3, r3, #16
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	061b      	lsls	r3, r3, #24
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	071b      	lsls	r3, r3, #28
 8002ddc:	491b      	ldr	r1, [pc, #108]	; (8002e4c <HAL_RCC_OscConfig+0x4a8>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002de2:	4b1c      	ldr	r3, [pc, #112]	; (8002e54 <HAL_RCC_OscConfig+0x4b0>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de8:	f7ff f852 	bl	8001e90 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df0:	f7ff f84e 	bl	8001e90 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e020      	b.n	8002e44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e02:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <HAL_RCC_OscConfig+0x4a8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCC_OscConfig+0x44c>
 8002e0e:	e018      	b.n	8002e42 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e10:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <HAL_RCC_OscConfig+0x4b0>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e16:	f7ff f83b 	bl	8001e90 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e1e:	f7ff f837 	bl	8001e90 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e009      	b.n	8002e44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_RCC_OscConfig+0x4a8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f0      	bne.n	8002e1e <HAL_RCC_OscConfig+0x47a>
 8002e3c:	e001      	b.n	8002e42 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	40007000 	.word	0x40007000
 8002e54:	42470060 	.word	0x42470060

08002e58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e01d      	b.n	8002ea6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7fe ff4e 	bl	8001d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3304      	adds	r3, #4
 8002e94:	4619      	mov	r1, r3
 8002e96:	4610      	mov	r0, r2
 8002e98:	f000 f988 	bl	80031ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b085      	sub	sp, #20
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f042 0201 	orr.w	r2, r2, #1
 8002ec4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b06      	cmp	r3, #6
 8002ed6:	d007      	beq.n	8002ee8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0201 	bic.w	r2, r2, #1
 8002f0c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6a1a      	ldr	r2, [r3, #32]
 8002f14:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f18:	4013      	ands	r3, r2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10f      	bne.n	8002f3e <HAL_TIM_Base_Stop_IT+0x48>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6a1a      	ldr	r2, [r3, #32]
 8002f24:	f240 4344 	movw	r3, #1092	; 0x444
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d107      	bne.n	8002f3e <HAL_TIM_Base_Stop_IT+0x48>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0201 	bic.w	r2, r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d122      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d11b      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0202 	mvn.w	r2, #2
 8002f78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f8ee 	bl	8003170 <HAL_TIM_IC_CaptureCallback>
 8002f94:	e005      	b.n	8002fa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f8e0 	bl	800315c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f8f1 	bl	8003184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d122      	bne.n	8002ffc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d11b      	bne.n	8002ffc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f06f 0204 	mvn.w	r2, #4
 8002fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f8c4 	bl	8003170 <HAL_TIM_IC_CaptureCallback>
 8002fe8:	e005      	b.n	8002ff6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f8b6 	bl	800315c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f8c7 	bl	8003184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b08      	cmp	r3, #8
 8003008:	d122      	bne.n	8003050 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b08      	cmp	r3, #8
 8003016:	d11b      	bne.n	8003050 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f06f 0208 	mvn.w	r2, #8
 8003020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2204      	movs	r2, #4
 8003026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f89a 	bl	8003170 <HAL_TIM_IC_CaptureCallback>
 800303c:	e005      	b.n	800304a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f88c 	bl	800315c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f89d 	bl	8003184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	2b10      	cmp	r3, #16
 800305c:	d122      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f003 0310 	and.w	r3, r3, #16
 8003068:	2b10      	cmp	r3, #16
 800306a:	d11b      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f06f 0210 	mvn.w	r2, #16
 8003074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2208      	movs	r2, #8
 800307a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f870 	bl	8003170 <HAL_TIM_IC_CaptureCallback>
 8003090:	e005      	b.n	800309e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f862 	bl	800315c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f873 	bl	8003184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d10e      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d107      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0201 	mvn.w	r2, #1
 80030c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7fd fcb0 	bl	8000a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030da:	2b80      	cmp	r3, #128	; 0x80
 80030dc:	d10e      	bne.n	80030fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e8:	2b80      	cmp	r3, #128	; 0x80
 80030ea:	d107      	bne.n	80030fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f97e 	bl	80033f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003106:	2b40      	cmp	r3, #64	; 0x40
 8003108:	d10e      	bne.n	8003128 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003114:	2b40      	cmp	r3, #64	; 0x40
 8003116:	d107      	bne.n	8003128 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f838 	bl	8003198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b20      	cmp	r3, #32
 8003134:	d10e      	bne.n	8003154 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 0320 	and.w	r3, r3, #32
 8003140:	2b20      	cmp	r3, #32
 8003142:	d107      	bne.n	8003154 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0220 	mvn.w	r2, #32
 800314c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f948 	bl	80033e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003154:	bf00      	nop
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a40      	ldr	r2, [pc, #256]	; (80032c0 <TIM_Base_SetConfig+0x114>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d013      	beq.n	80031ec <TIM_Base_SetConfig+0x40>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ca:	d00f      	beq.n	80031ec <TIM_Base_SetConfig+0x40>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a3d      	ldr	r2, [pc, #244]	; (80032c4 <TIM_Base_SetConfig+0x118>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00b      	beq.n	80031ec <TIM_Base_SetConfig+0x40>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a3c      	ldr	r2, [pc, #240]	; (80032c8 <TIM_Base_SetConfig+0x11c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d007      	beq.n	80031ec <TIM_Base_SetConfig+0x40>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a3b      	ldr	r2, [pc, #236]	; (80032cc <TIM_Base_SetConfig+0x120>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d003      	beq.n	80031ec <TIM_Base_SetConfig+0x40>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a3a      	ldr	r2, [pc, #232]	; (80032d0 <TIM_Base_SetConfig+0x124>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d108      	bne.n	80031fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a2f      	ldr	r2, [pc, #188]	; (80032c0 <TIM_Base_SetConfig+0x114>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d02b      	beq.n	800325e <TIM_Base_SetConfig+0xb2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320c:	d027      	beq.n	800325e <TIM_Base_SetConfig+0xb2>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a2c      	ldr	r2, [pc, #176]	; (80032c4 <TIM_Base_SetConfig+0x118>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d023      	beq.n	800325e <TIM_Base_SetConfig+0xb2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a2b      	ldr	r2, [pc, #172]	; (80032c8 <TIM_Base_SetConfig+0x11c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d01f      	beq.n	800325e <TIM_Base_SetConfig+0xb2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a2a      	ldr	r2, [pc, #168]	; (80032cc <TIM_Base_SetConfig+0x120>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d01b      	beq.n	800325e <TIM_Base_SetConfig+0xb2>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a29      	ldr	r2, [pc, #164]	; (80032d0 <TIM_Base_SetConfig+0x124>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d017      	beq.n	800325e <TIM_Base_SetConfig+0xb2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a28      	ldr	r2, [pc, #160]	; (80032d4 <TIM_Base_SetConfig+0x128>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d013      	beq.n	800325e <TIM_Base_SetConfig+0xb2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a27      	ldr	r2, [pc, #156]	; (80032d8 <TIM_Base_SetConfig+0x12c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00f      	beq.n	800325e <TIM_Base_SetConfig+0xb2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a26      	ldr	r2, [pc, #152]	; (80032dc <TIM_Base_SetConfig+0x130>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00b      	beq.n	800325e <TIM_Base_SetConfig+0xb2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a25      	ldr	r2, [pc, #148]	; (80032e0 <TIM_Base_SetConfig+0x134>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d007      	beq.n	800325e <TIM_Base_SetConfig+0xb2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a24      	ldr	r2, [pc, #144]	; (80032e4 <TIM_Base_SetConfig+0x138>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d003      	beq.n	800325e <TIM_Base_SetConfig+0xb2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a23      	ldr	r2, [pc, #140]	; (80032e8 <TIM_Base_SetConfig+0x13c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d108      	bne.n	8003270 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4313      	orrs	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <TIM_Base_SetConfig+0x114>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d003      	beq.n	80032a4 <TIM_Base_SetConfig+0xf8>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a0c      	ldr	r2, [pc, #48]	; (80032d0 <TIM_Base_SetConfig+0x124>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d103      	bne.n	80032ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	615a      	str	r2, [r3, #20]
}
 80032b2:	bf00      	nop
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40010000 	.word	0x40010000
 80032c4:	40000400 	.word	0x40000400
 80032c8:	40000800 	.word	0x40000800
 80032cc:	40000c00 	.word	0x40000c00
 80032d0:	40010400 	.word	0x40010400
 80032d4:	40014000 	.word	0x40014000
 80032d8:	40014400 	.word	0x40014400
 80032dc:	40014800 	.word	0x40014800
 80032e0:	40001800 	.word	0x40001800
 80032e4:	40001c00 	.word	0x40001c00
 80032e8:	40002000 	.word	0x40002000

080032ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003300:	2302      	movs	r3, #2
 8003302:	e05a      	b.n	80033ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a21      	ldr	r2, [pc, #132]	; (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d022      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003350:	d01d      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1d      	ldr	r2, [pc, #116]	; (80033cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d018      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1b      	ldr	r2, [pc, #108]	; (80033d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d013      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1a      	ldr	r2, [pc, #104]	; (80033d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00e      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a18      	ldr	r2, [pc, #96]	; (80033d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d009      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a17      	ldr	r2, [pc, #92]	; (80033dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d004      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a15      	ldr	r2, [pc, #84]	; (80033e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d10c      	bne.n	80033a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003394:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	4313      	orrs	r3, r2
 800339e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40010000 	.word	0x40010000
 80033cc:	40000400 	.word	0x40000400
 80033d0:	40000800 	.word	0x40000800
 80033d4:	40000c00 	.word	0x40000c00
 80033d8:	40010400 	.word	0x40010400
 80033dc:	40014000 	.word	0x40014000
 80033e0:	40001800 	.word	0x40001800

080033e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <__libc_init_array>:
 800340c:	b570      	push	{r4, r5, r6, lr}
 800340e:	4e0d      	ldr	r6, [pc, #52]	; (8003444 <__libc_init_array+0x38>)
 8003410:	4c0d      	ldr	r4, [pc, #52]	; (8003448 <__libc_init_array+0x3c>)
 8003412:	1ba4      	subs	r4, r4, r6
 8003414:	10a4      	asrs	r4, r4, #2
 8003416:	2500      	movs	r5, #0
 8003418:	42a5      	cmp	r5, r4
 800341a:	d109      	bne.n	8003430 <__libc_init_array+0x24>
 800341c:	4e0b      	ldr	r6, [pc, #44]	; (800344c <__libc_init_array+0x40>)
 800341e:	4c0c      	ldr	r4, [pc, #48]	; (8003450 <__libc_init_array+0x44>)
 8003420:	f000 f820 	bl	8003464 <_init>
 8003424:	1ba4      	subs	r4, r4, r6
 8003426:	10a4      	asrs	r4, r4, #2
 8003428:	2500      	movs	r5, #0
 800342a:	42a5      	cmp	r5, r4
 800342c:	d105      	bne.n	800343a <__libc_init_array+0x2e>
 800342e:	bd70      	pop	{r4, r5, r6, pc}
 8003430:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003434:	4798      	blx	r3
 8003436:	3501      	adds	r5, #1
 8003438:	e7ee      	b.n	8003418 <__libc_init_array+0xc>
 800343a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800343e:	4798      	blx	r3
 8003440:	3501      	adds	r5, #1
 8003442:	e7f2      	b.n	800342a <__libc_init_array+0x1e>
 8003444:	08003494 	.word	0x08003494
 8003448:	08003494 	.word	0x08003494
 800344c:	08003494 	.word	0x08003494
 8003450:	08003498 	.word	0x08003498

08003454 <memset>:
 8003454:	4402      	add	r2, r0
 8003456:	4603      	mov	r3, r0
 8003458:	4293      	cmp	r3, r2
 800345a:	d100      	bne.n	800345e <memset+0xa>
 800345c:	4770      	bx	lr
 800345e:	f803 1b01 	strb.w	r1, [r3], #1
 8003462:	e7f9      	b.n	8003458 <memset+0x4>

08003464 <_init>:
 8003464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003466:	bf00      	nop
 8003468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800346a:	bc08      	pop	{r3}
 800346c:	469e      	mov	lr, r3
 800346e:	4770      	bx	lr

08003470 <_fini>:
 8003470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003472:	bf00      	nop
 8003474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003476:	bc08      	pop	{r3}
 8003478:	469e      	mov	lr, r3
 800347a:	4770      	bx	lr
